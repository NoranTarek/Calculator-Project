
cal_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c34  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00002c34  00002ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000273c  00000000  00000000  00002dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d1e  00000000  00000000  0000550c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  0000622a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  000063ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  000065fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  00008c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  0000a0de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000b3ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000b5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000b8d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c2ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 23 15 	call	0x2a46	; 0x2a46 <main>
      7a:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e1 15 	jmp	0x2bc2	; 0x2bc2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e1 15 	jmp	0x2bc2	; 0x2bc2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	e8 59       	subi	r30, 0x98	; 152
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <DIO_enuInit>:
 */

#include "DIO_int.h"

ES_t DIO_enuInit(void)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
		ES_t Local_enuErrorstate = ES_NOK;
     ee4:	19 82       	std	Y+1, r1	; 0x01
		DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     ee6:	ea e3       	ldi	r30, 0x3A	; 58
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	80 83       	st	Z, r24
		DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     eee:	e7 e3       	ldi	r30, 0x37	; 55
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	80 83       	st	Z, r24
		DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     ef6:	e4 e3       	ldi	r30, 0x34	; 52
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 ef       	ldi	r24, 0xF0	; 240
     efc:	80 83       	st	Z, r24
		DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     efe:	e1 e3       	ldi	r30, 0x31	; 49
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	80 83       	st	Z, r24

		PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     f06:	eb e3       	ldi	r30, 0x3B	; 59
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	10 82       	st	Z, r1
		PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     f0c:	e8 e3       	ldi	r30, 0x38	; 56
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	10 82       	st	Z, r1
		PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     f12:	e5 e3       	ldi	r30, 0x35	; 53
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	80 83       	st	Z, r24
		PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     f1a:	e2 e3       	ldi	r30, 0x32	; 50
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	10 82       	st	Z, r1

		Local_enuErrorstate = ES_OK;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	89 83       	std	Y+1, r24	; 0x01

		return Local_enuErrorstate;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
}
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <DIO_enuSetPortDirection+0x6>
     f34:	00 d0       	rcall	.+0      	; 0xf36 <DIO_enuSetPortDirection+0x8>
     f36:	0f 92       	push	r0
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	8a 83       	std	Y+2, r24	; 0x02
     f3e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     f40:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	84 30       	cpi	r24, 0x04	; 4
     f46:	a8 f5       	brcc	.+106    	; 0xfb2 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	3d 83       	std	Y+5, r19	; 0x05
     f50:	2c 83       	std	Y+4, r18	; 0x04
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	9d 81       	ldd	r25, Y+5	; 0x05
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	91 05       	cpc	r25, r1
     f5a:	d1 f0       	breq	.+52     	; 0xf90 <DIO_enuSetPortDirection+0x62>
     f5c:	2c 81       	ldd	r18, Y+4	; 0x04
     f5e:	3d 81       	ldd	r19, Y+5	; 0x05
     f60:	22 30       	cpi	r18, 0x02	; 2
     f62:	31 05       	cpc	r19, r1
     f64:	2c f4       	brge	.+10     	; 0xf70 <DIO_enuSetPortDirection+0x42>
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	9d 81       	ldd	r25, Y+5	; 0x05
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	61 f0       	breq	.+24     	; 0xf86 <DIO_enuSetPortDirection+0x58>
     f6e:	1e c0       	rjmp	.+60     	; 0xfac <DIO_enuSetPortDirection+0x7e>
     f70:	2c 81       	ldd	r18, Y+4	; 0x04
     f72:	3d 81       	ldd	r19, Y+5	; 0x05
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	81 f0       	breq	.+32     	; 0xf9a <DIO_enuSetPortDirection+0x6c>
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	83 30       	cpi	r24, 0x03	; 3
     f80:	91 05       	cpc	r25, r1
     f82:	81 f0       	breq	.+32     	; 0xfa4 <DIO_enuSetPortDirection+0x76>
     f84:	13 c0       	rjmp	.+38     	; 0xfac <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
     f86:	ea e3       	ldi	r30, 0x3A	; 58
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	80 83       	st	Z, r24
     f8e:	0e c0       	rjmp	.+28     	; 0xfac <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
     f90:	e7 e3       	ldi	r30, 0x37	; 55
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	80 83       	st	Z, r24
     f98:	09 c0       	rjmp	.+18     	; 0xfac <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
     f9a:	e4 e3       	ldi	r30, 0x34	; 52
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	80 83       	st	Z, r24
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
     fa4:	e1 e3       	ldi	r30, 0x31	; 49
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     fb2:	83 e0       	ldi	r24, 0x03	; 3
     fb4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <DIO_enuSetPortValue+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <DIO_enuSetPortValue+0x8>
     fd0:	0f 92       	push	r0
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	8a 83       	std	Y+2, r24	; 0x02
     fd8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     fda:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	84 30       	cpi	r24, 0x04	; 4
     fe0:	a8 f5       	brcc	.+106    	; 0x104c <DIO_enuSetPortValue+0x84>
		{
			switch(Copy_u8PortID)
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	3d 83       	std	Y+5, r19	; 0x05
     fea:	2c 83       	std	Y+4, r18	; 0x04
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	9d 81       	ldd	r25, Y+5	; 0x05
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	91 05       	cpc	r25, r1
     ff4:	d1 f0       	breq	.+52     	; 0x102a <DIO_enuSetPortValue+0x62>
     ff6:	2c 81       	ldd	r18, Y+4	; 0x04
     ff8:	3d 81       	ldd	r19, Y+5	; 0x05
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	2c f4       	brge	.+10     	; 0x100a <DIO_enuSetPortValue+0x42>
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	9d 81       	ldd	r25, Y+5	; 0x05
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	61 f0       	breq	.+24     	; 0x1020 <DIO_enuSetPortValue+0x58>
    1008:	1e c0       	rjmp	.+60     	; 0x1046 <DIO_enuSetPortValue+0x7e>
    100a:	2c 81       	ldd	r18, Y+4	; 0x04
    100c:	3d 81       	ldd	r19, Y+5	; 0x05
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	81 f0       	breq	.+32     	; 0x1034 <DIO_enuSetPortValue+0x6c>
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	9d 81       	ldd	r25, Y+5	; 0x05
    1018:	83 30       	cpi	r24, 0x03	; 3
    101a:	91 05       	cpc	r25, r1
    101c:	81 f0       	breq	.+32     	; 0x103e <DIO_enuSetPortValue+0x76>
    101e:	13 c0       	rjmp	.+38     	; 0x1046 <DIO_enuSetPortValue+0x7e>
			{
			case DIO_PORTA:
				PORTA = Copy_u8Value;
    1020:	eb e3       	ldi	r30, 0x3B	; 59
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	80 83       	st	Z, r24
    1028:	0e c0       	rjmp	.+28     	; 0x1046 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTB:
				PORTB = Copy_u8Value;
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	80 83       	st	Z, r24
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTC:
				PORTC = Copy_u8Value;
    1034:	e5 e3       	ldi	r30, 0x35	; 53
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	80 83       	st	Z, r24
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTD:
				PORTD = Copy_u8Value;
    103e:	e2 e3       	ldi	r30, 0x32	; 50
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_enuSetPortValue+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	00 d0       	rcall	.+0      	; 0x1068 <DIO_enuTogPort+0x6>
    1068:	00 d0       	rcall	.+0      	; 0x106a <DIO_enuTogPort+0x8>
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1070:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	84 30       	cpi	r24, 0x04	; 4
    1076:	08 f0       	brcs	.+2      	; 0x107a <DIO_enuTogPort+0x18>
    1078:	41 c0       	rjmp	.+130    	; 0x10fc <DIO_enuTogPort+0x9a>
		{
			switch(Copy_u8PortID)
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3c 83       	std	Y+4, r19	; 0x04
    1082:	2b 83       	std	Y+3, r18	; 0x03
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	91 05       	cpc	r25, r1
    108c:	e9 f0       	breq	.+58     	; 0x10c8 <DIO_enuTogPort+0x66>
    108e:	2b 81       	ldd	r18, Y+3	; 0x03
    1090:	3c 81       	ldd	r19, Y+4	; 0x04
    1092:	22 30       	cpi	r18, 0x02	; 2
    1094:	31 05       	cpc	r19, r1
    1096:	2c f4       	brge	.+10     	; 0x10a2 <DIO_enuTogPort+0x40>
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	61 f0       	breq	.+24     	; 0x10b8 <DIO_enuTogPort+0x56>
    10a0:	2a c0       	rjmp	.+84     	; 0x10f6 <DIO_enuTogPort+0x94>
    10a2:	2b 81       	ldd	r18, Y+3	; 0x03
    10a4:	3c 81       	ldd	r19, Y+4	; 0x04
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	31 05       	cpc	r19, r1
    10aa:	b1 f0       	breq	.+44     	; 0x10d8 <DIO_enuTogPort+0x76>
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9c 81       	ldd	r25, Y+4	; 0x04
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	91 05       	cpc	r25, r1
    10b4:	c9 f0       	breq	.+50     	; 0x10e8 <DIO_enuTogPort+0x86>
    10b6:	1f c0       	rjmp	.+62     	; 0x10f6 <DIO_enuTogPort+0x94>
			{
			case DIO_PORTA:
				PORTA = ~PORTA;
    10b8:	ab e3       	ldi	r26, 0x3B	; 59
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	eb e3       	ldi	r30, 0x3B	; 59
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	80 95       	com	r24
    10c4:	8c 93       	st	X, r24
    10c6:	17 c0       	rjmp	.+46     	; 0x10f6 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
    10c8:	a8 e3       	ldi	r26, 0x38	; 56
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e8 e3       	ldi	r30, 0x38	; 56
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	80 95       	com	r24
    10d4:	8c 93       	st	X, r24
    10d6:	0f c0       	rjmp	.+30     	; 0x10f6 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
    10d8:	a5 e3       	ldi	r26, 0x35	; 53
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e3       	ldi	r30, 0x35	; 53
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 95       	com	r24
    10e4:	8c 93       	st	X, r24
    10e6:	07 c0       	rjmp	.+14     	; 0x10f6 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
    10e8:	a2 e3       	ldi	r26, 0x32	; 50
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e2 e3       	ldi	r30, 0x32	; 50
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 95       	com	r24
    10f4:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_enuTogPort+0x9e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    10fc:	83 e0       	ldi	r24, 0x03	; 3
    10fe:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 *Copy_u8Value)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <DIO_enuGetPortValue+0x6>
    1116:	00 d0       	rcall	.+0      	; 0x1118 <DIO_enuGetPortValue+0x8>
    1118:	00 d0       	rcall	.+0      	; 0x111a <DIO_enuGetPortValue+0xa>
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	8a 83       	std	Y+2, r24	; 0x02
    1120:	7c 83       	std	Y+4, r23	; 0x04
    1122:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1124:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	09 f4       	brne	.+2      	; 0x1130 <DIO_enuGetPortValue+0x20>
    112e:	43 c0       	rjmp	.+134    	; 0x11b6 <DIO_enuGetPortValue+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	84 30       	cpi	r24, 0x04	; 4
    1134:	e8 f5       	brcc	.+122    	; 0x11b0 <DIO_enuGetPortValue+0xa0>
			{
				switch(Copy_u8PortID)
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3e 83       	std	Y+6, r19	; 0x06
    113e:	2d 83       	std	Y+5, r18	; 0x05
    1140:	8d 81       	ldd	r24, Y+5	; 0x05
    1142:	9e 81       	ldd	r25, Y+6	; 0x06
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	91 05       	cpc	r25, r1
    1148:	e1 f0       	breq	.+56     	; 0x1182 <DIO_enuGetPortValue+0x72>
    114a:	2d 81       	ldd	r18, Y+5	; 0x05
    114c:	3e 81       	ldd	r19, Y+6	; 0x06
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	2c f4       	brge	.+10     	; 0x115e <DIO_enuGetPortValue+0x4e>
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	61 f0       	breq	.+24     	; 0x1174 <DIO_enuGetPortValue+0x64>
    115c:	26 c0       	rjmp	.+76     	; 0x11aa <DIO_enuGetPortValue+0x9a>
    115e:	2d 81       	ldd	r18, Y+5	; 0x05
    1160:	3e 81       	ldd	r19, Y+6	; 0x06
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	a1 f0       	breq	.+40     	; 0x1190 <DIO_enuGetPortValue+0x80>
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	9e 81       	ldd	r25, Y+6	; 0x06
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	91 05       	cpc	r25, r1
    1170:	b1 f0       	breq	.+44     	; 0x119e <DIO_enuGetPortValue+0x8e>
    1172:	1b c0       	rjmp	.+54     	; 0x11aa <DIO_enuGetPortValue+0x9a>
				{
				case DIO_PORTA:
					*Copy_u8Value = PINA;
    1174:	e9 e3       	ldi	r30, 0x39	; 57
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	eb 81       	ldd	r30, Y+3	; 0x03
    117c:	fc 81       	ldd	r31, Y+4	; 0x04
    117e:	80 83       	st	Z, r24
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTB:
					*Copy_u8Value = PINB;
    1182:	e6 e3       	ldi	r30, 0x36	; 54
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	eb 81       	ldd	r30, Y+3	; 0x03
    118a:	fc 81       	ldd	r31, Y+4	; 0x04
    118c:	80 83       	st	Z, r24
    118e:	0d c0       	rjmp	.+26     	; 0x11aa <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTC:
					*Copy_u8Value = PINC;
    1190:	e3 e3       	ldi	r30, 0x33	; 51
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	eb 81       	ldd	r30, Y+3	; 0x03
    1198:	fc 81       	ldd	r31, Y+4	; 0x04
    119a:	80 83       	st	Z, r24
    119c:	06 c0       	rjmp	.+12     	; 0x11aa <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTD:
					*Copy_u8Value = PIND;
    119e:	e0 e3       	ldi	r30, 0x30	; 48
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	eb 81       	ldd	r30, Y+3	; 0x03
    11a6:	fc 81       	ldd	r31, Y+4	; 0x04
    11a8:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	05 c0       	rjmp	.+10     	; 0x11ba <DIO_enuGetPortValue+0xaa>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_enuGetPortValue+0xaa>
			}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    11bc:	26 96       	adiw	r28, 0x06	; 6
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <DIO_enuSetPinDirection+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <DIO_enuSetPinDirection+0x8>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <DIO_enuSetPinDirection+0xa>
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	8a 83       	std	Y+2, r24	; 0x02
    11de:	6b 83       	std	Y+3, r22	; 0x03
    11e0:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    11e2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	84 30       	cpi	r24, 0x04	; 4
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <DIO_enuSetPinDirection+0x1e>
    11ea:	d1 c0       	rjmp	.+418    	; 0x138e <DIO_enuSetPinDirection+0x1c0>
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 30       	cpi	r24, 0x08	; 8
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <DIO_enuSetPinDirection+0x26>
    11f2:	cd c0       	rjmp	.+410    	; 0x138e <DIO_enuSetPinDirection+0x1c0>
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <DIO_enuSetPinDirection+0x2e>
    11fa:	c9 c0       	rjmp	.+402    	; 0x138e <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3e 83       	std	Y+6, r19	; 0x06
    1204:	2d 83       	std	Y+5, r18	; 0x05
    1206:	6d 81       	ldd	r22, Y+5	; 0x05
    1208:	7e 81       	ldd	r23, Y+6	; 0x06
    120a:	61 30       	cpi	r22, 0x01	; 1
    120c:	71 05       	cpc	r23, r1
    120e:	09 f4       	brne	.+2      	; 0x1212 <DIO_enuSetPinDirection+0x44>
    1210:	41 c0       	rjmp	.+130    	; 0x1294 <DIO_enuSetPinDirection+0xc6>
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	9e 81       	ldd	r25, Y+6	; 0x06
    1216:	82 30       	cpi	r24, 0x02	; 2
    1218:	91 05       	cpc	r25, r1
    121a:	34 f4       	brge	.+12     	; 0x1228 <DIO_enuSetPinDirection+0x5a>
    121c:	2d 81       	ldd	r18, Y+5	; 0x05
    121e:	3e 81       	ldd	r19, Y+6	; 0x06
    1220:	21 15       	cp	r18, r1
    1222:	31 05       	cpc	r19, r1
    1224:	71 f0       	breq	.+28     	; 0x1242 <DIO_enuSetPinDirection+0x74>
    1226:	b0 c0       	rjmp	.+352    	; 0x1388 <DIO_enuSetPinDirection+0x1ba>
    1228:	6d 81       	ldd	r22, Y+5	; 0x05
    122a:	7e 81       	ldd	r23, Y+6	; 0x06
    122c:	62 30       	cpi	r22, 0x02	; 2
    122e:	71 05       	cpc	r23, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <DIO_enuSetPinDirection+0x66>
    1232:	59 c0       	rjmp	.+178    	; 0x12e6 <DIO_enuSetPinDirection+0x118>
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	83 30       	cpi	r24, 0x03	; 3
    123a:	91 05       	cpc	r25, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <DIO_enuSetPinDirection+0x72>
    123e:	7c c0       	rjmp	.+248    	; 0x1338 <DIO_enuSetPinDirection+0x16a>
    1240:	a3 c0       	rjmp	.+326    	; 0x1388 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1242:	aa e3       	ldi	r26, 0x3A	; 58
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	ea e3       	ldi	r30, 0x3A	; 58
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_enuSetPinDirection+0x90>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	2a 95       	dec	r18
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_enuSetPinDirection+0x8c>
    1262:	80 95       	com	r24
    1264:	84 23       	and	r24, r20
    1266:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value<<Copy_u8PinID);
    1268:	aa e3       	ldi	r26, 0x3A	; 58
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	ea e3       	ldi	r30, 0x3A	; 58
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	b9 01       	movw	r22, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_enuSetPinDirection+0xba>
    1284:	66 0f       	add	r22, r22
    1286:	77 1f       	adc	r23, r23
    1288:	8a 95       	dec	r24
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_enuSetPinDirection+0xb6>
    128c:	cb 01       	movw	r24, r22
    128e:	84 2b       	or	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	7a c0       	rjmp	.+244    	; 0x1388 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1294:	a7 e3       	ldi	r26, 0x37	; 55
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e7 e3       	ldi	r30, 0x37	; 55
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_enuSetPinDirection+0xe2>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	2a 95       	dec	r18
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_enuSetPinDirection+0xde>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value<<Copy_u8PinID);
    12ba:	a7 e3       	ldi	r26, 0x37	; 55
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e7 e3       	ldi	r30, 0x37	; 55
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	b9 01       	movw	r22, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_enuSetPinDirection+0x10c>
    12d6:	66 0f       	add	r22, r22
    12d8:	77 1f       	adc	r23, r23
    12da:	8a 95       	dec	r24
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <DIO_enuSetPinDirection+0x108>
    12de:	cb 01       	movw	r24, r22
    12e0:	84 2b       	or	r24, r20
    12e2:	8c 93       	st	X, r24
    12e4:	51 c0       	rjmp	.+162    	; 0x1388 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    12e6:	a4 e3       	ldi	r26, 0x34	; 52
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e4 e3       	ldi	r30, 0x34	; 52
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_enuSetPinDirection+0x134>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	2a 95       	dec	r18
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_enuSetPinDirection+0x130>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value<<Copy_u8PinID);
    130c:	a4 e3       	ldi	r26, 0x34	; 52
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e4 e3       	ldi	r30, 0x34	; 52
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	b9 01       	movw	r22, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_enuSetPinDirection+0x15e>
    1328:	66 0f       	add	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_enuSetPinDirection+0x15a>
    1330:	cb 01       	movw	r24, r22
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	28 c0       	rjmp	.+80     	; 0x1388 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1338:	a1 e3       	ldi	r26, 0x31	; 49
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e1 e3       	ldi	r30, 0x31	; 49
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_enuSetPinDirection+0x186>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	2a 95       	dec	r18
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_enuSetPinDirection+0x182>
    1358:	80 95       	com	r24
    135a:	84 23       	and	r24, r20
    135c:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value<<Copy_u8PinID);
    135e:	a1 e3       	ldi	r26, 0x31	; 49
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e1 e3       	ldi	r30, 0x31	; 49
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	b9 01       	movw	r22, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_enuSetPinDirection+0x1b0>
    137a:	66 0f       	add	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	8a 95       	dec	r24
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_enuSetPinDirection+0x1ac>
    1382:	cb 01       	movw	r24, r22
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
}
    1394:	26 96       	adiw	r28, 0x06	; 6
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <DIO_enuSetPinValue+0x6>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <DIO_enuSetPinValue+0x8>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <DIO_enuSetPinValue+0xa>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	8a 83       	std	Y+2, r24	; 0x02
    13b6:	6b 83       	std	Y+3, r22	; 0x03
    13b8:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    13ba:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	84 30       	cpi	r24, 0x04	; 4
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <DIO_enuSetPinValue+0x1e>
    13c2:	d1 c0       	rjmp	.+418    	; 0x1566 <DIO_enuSetPinValue+0x1c0>
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	88 30       	cpi	r24, 0x08	; 8
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <DIO_enuSetPinValue+0x26>
    13ca:	cd c0       	rjmp	.+410    	; 0x1566 <DIO_enuSetPinValue+0x1c0>
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <DIO_enuSetPinValue+0x2e>
    13d2:	c9 c0       	rjmp	.+402    	; 0x1566 <DIO_enuSetPinValue+0x1c0>
		{
			switch(Copy_u8PortID)
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3e 83       	std	Y+6, r19	; 0x06
    13dc:	2d 83       	std	Y+5, r18	; 0x05
    13de:	6d 81       	ldd	r22, Y+5	; 0x05
    13e0:	7e 81       	ldd	r23, Y+6	; 0x06
    13e2:	61 30       	cpi	r22, 0x01	; 1
    13e4:	71 05       	cpc	r23, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <DIO_enuSetPinValue+0x44>
    13e8:	41 c0       	rjmp	.+130    	; 0x146c <DIO_enuSetPinValue+0xc6>
    13ea:	8d 81       	ldd	r24, Y+5	; 0x05
    13ec:	9e 81       	ldd	r25, Y+6	; 0x06
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	91 05       	cpc	r25, r1
    13f2:	34 f4       	brge	.+12     	; 0x1400 <DIO_enuSetPinValue+0x5a>
    13f4:	2d 81       	ldd	r18, Y+5	; 0x05
    13f6:	3e 81       	ldd	r19, Y+6	; 0x06
    13f8:	21 15       	cp	r18, r1
    13fa:	31 05       	cpc	r19, r1
    13fc:	71 f0       	breq	.+28     	; 0x141a <DIO_enuSetPinValue+0x74>
    13fe:	b0 c0       	rjmp	.+352    	; 0x1560 <DIO_enuSetPinValue+0x1ba>
    1400:	6d 81       	ldd	r22, Y+5	; 0x05
    1402:	7e 81       	ldd	r23, Y+6	; 0x06
    1404:	62 30       	cpi	r22, 0x02	; 2
    1406:	71 05       	cpc	r23, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <DIO_enuSetPinValue+0x66>
    140a:	59 c0       	rjmp	.+178    	; 0x14be <DIO_enuSetPinValue+0x118>
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	83 30       	cpi	r24, 0x03	; 3
    1412:	91 05       	cpc	r25, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <DIO_enuSetPinValue+0x72>
    1416:	7c c0       	rjmp	.+248    	; 0x1510 <DIO_enuSetPinValue+0x16a>
    1418:	a3 c0       	rjmp	.+326    	; 0x1560 <DIO_enuSetPinValue+0x1ba>
			{
			case DIO_PORTA:
				PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    141a:	ab e3       	ldi	r26, 0x3B	; 59
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	eb e3       	ldi	r30, 0x3B	; 59
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_enuSetPinValue+0x90>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	2a 95       	dec	r18
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_enuSetPinValue+0x8c>
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value<<Copy_u8PinID);
    1440:	ab e3       	ldi	r26, 0x3B	; 59
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	eb e3       	ldi	r30, 0x3B	; 59
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	b9 01       	movw	r22, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_enuSetPinValue+0xba>
    145c:	66 0f       	add	r22, r22
    145e:	77 1f       	adc	r23, r23
    1460:	8a 95       	dec	r24
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_enuSetPinValue+0xb6>
    1464:	cb 01       	movw	r24, r22
    1466:	84 2b       	or	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	7a c0       	rjmp	.+244    	; 0x1560 <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTB:
				PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    146c:	a8 e3       	ldi	r26, 0x38	; 56
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e8 e3       	ldi	r30, 0x38	; 56
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_enuSetPinValue+0xe2>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	2a 95       	dec	r18
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_enuSetPinValue+0xde>
    148c:	80 95       	com	r24
    148e:	84 23       	and	r24, r20
    1490:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value<<Copy_u8PinID);
    1492:	a8 e3       	ldi	r26, 0x38	; 56
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e8 e3       	ldi	r30, 0x38	; 56
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	b9 01       	movw	r22, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <DIO_enuSetPinValue+0x10c>
    14ae:	66 0f       	add	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	8a 95       	dec	r24
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <DIO_enuSetPinValue+0x108>
    14b6:	cb 01       	movw	r24, r22
    14b8:	84 2b       	or	r24, r20
    14ba:	8c 93       	st	X, r24
    14bc:	51 c0       	rjmp	.+162    	; 0x1560 <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTC:
				PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    14be:	a5 e3       	ldi	r26, 0x35	; 53
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e5 e3       	ldi	r30, 0x35	; 53
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <DIO_enuSetPinValue+0x134>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	2a 95       	dec	r18
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <DIO_enuSetPinValue+0x130>
    14de:	80 95       	com	r24
    14e0:	84 23       	and	r24, r20
    14e2:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value<<Copy_u8PinID);
    14e4:	a5 e3       	ldi	r26, 0x35	; 53
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e3       	ldi	r30, 0x35	; 53
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	b9 01       	movw	r22, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_enuSetPinValue+0x15e>
    1500:	66 0f       	add	r22, r22
    1502:	77 1f       	adc	r23, r23
    1504:	8a 95       	dec	r24
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_enuSetPinValue+0x15a>
    1508:	cb 01       	movw	r24, r22
    150a:	84 2b       	or	r24, r20
    150c:	8c 93       	st	X, r24
    150e:	28 c0       	rjmp	.+80     	; 0x1560 <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTD:
				PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1510:	a2 e3       	ldi	r26, 0x32	; 50
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e2 e3       	ldi	r30, 0x32	; 50
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_enuSetPinValue+0x186>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	2a 95       	dec	r18
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_enuSetPinValue+0x182>
    1530:	80 95       	com	r24
    1532:	84 23       	and	r24, r20
    1534:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value<<Copy_u8PinID);
    1536:	a2 e3       	ldi	r26, 0x32	; 50
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e2 e3       	ldi	r30, 0x32	; 50
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	b9 01       	movw	r22, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_enuSetPinValue+0x1b0>
    1552:	66 0f       	add	r22, r22
    1554:	77 1f       	adc	r23, r23
    1556:	8a 95       	dec	r24
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_enuSetPinValue+0x1ac>
    155a:	cb 01       	movw	r24, r22
    155c:	84 2b       	or	r24, r20
    155e:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_enuSetPinValue+0x1c4>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	26 96       	adiw	r28, 0x06	; 6
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	00 d0       	rcall	.+0      	; 0x1584 <DIO_enuTogPin+0x6>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <DIO_enuTogPin+0x8>
    1586:	0f 92       	push	r0
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	8a 83       	std	Y+2, r24	; 0x02
    158e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1590:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	84 30       	cpi	r24, 0x04	; 4
    1596:	08 f0       	brcs	.+2      	; 0x159a <DIO_enuTogPin+0x1c>
    1598:	75 c0       	rjmp	.+234    	; 0x1684 <DIO_enuTogPin+0x106>
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	88 30       	cpi	r24, 0x08	; 8
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <DIO_enuTogPin+0x24>
    15a0:	71 c0       	rjmp	.+226    	; 0x1684 <DIO_enuTogPin+0x106>
		{
			switch(Copy_u8PortID)
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3d 83       	std	Y+5, r19	; 0x05
    15aa:	2c 83       	std	Y+4, r18	; 0x04
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	9d 81       	ldd	r25, Y+5	; 0x05
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	91 05       	cpc	r25, r1
    15b4:	49 f1       	breq	.+82     	; 0x1608 <DIO_enuTogPin+0x8a>
    15b6:	2c 81       	ldd	r18, Y+4	; 0x04
    15b8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	2c f4       	brge	.+10     	; 0x15ca <DIO_enuTogPin+0x4c>
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	61 f0       	breq	.+24     	; 0x15e0 <DIO_enuTogPin+0x62>
    15c8:	5a c0       	rjmp	.+180    	; 0x167e <DIO_enuTogPin+0x100>
    15ca:	2c 81       	ldd	r18, Y+4	; 0x04
    15cc:	3d 81       	ldd	r19, Y+5	; 0x05
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	71 f1       	breq	.+92     	; 0x1630 <DIO_enuTogPin+0xb2>
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	9d 81       	ldd	r25, Y+5	; 0x05
    15d8:	83 30       	cpi	r24, 0x03	; 3
    15da:	91 05       	cpc	r25, r1
    15dc:	e9 f1       	breq	.+122    	; 0x1658 <DIO_enuTogPin+0xda>
    15de:	4f c0       	rjmp	.+158    	; 0x167e <DIO_enuTogPin+0x100>
			{
			case DIO_PORTA:
				DDRA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    15e0:	aa e3       	ldi	r26, 0x3A	; 58
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ea e3       	ldi	r30, 0x3A	; 58
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_enuTogPin+0x80>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_enuTogPin+0x7c>
    1602:	84 27       	eor	r24, r20
    1604:	8c 93       	st	X, r24
    1606:	3b c0       	rjmp	.+118    	; 0x167e <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTB:
				DDRB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1608:	a7 e3       	ldi	r26, 0x37	; 55
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e7 e3       	ldi	r30, 0x37	; 55
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_enuTogPin+0xa8>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <DIO_enuTogPin+0xa4>
    162a:	84 27       	eor	r24, r20
    162c:	8c 93       	st	X, r24
    162e:	27 c0       	rjmp	.+78     	; 0x167e <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTC:
				DDRC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1630:	a4 e3       	ldi	r26, 0x34	; 52
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e4 e3       	ldi	r30, 0x34	; 52
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <DIO_enuTogPin+0xd0>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <DIO_enuTogPin+0xcc>
    1652:	84 27       	eor	r24, r20
    1654:	8c 93       	st	X, r24
    1656:	13 c0       	rjmp	.+38     	; 0x167e <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTD:
				DDRD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1658:	a1 e3       	ldi	r26, 0x31	; 49
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e1 e3       	ldi	r30, 0x31	; 49
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <DIO_enuTogPin+0xf8>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <DIO_enuTogPin+0xf4>
    167a:	84 27       	eor	r24, r20
    167c:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_enuTogPin+0x10a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1684:	83 e0       	ldi	r24, 0x03	; 3
    1686:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 *Copy_u8Value)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	27 97       	sbiw	r28, 0x07	; 7
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	8a 83       	std	Y+2, r24	; 0x02
    16b0:	6b 83       	std	Y+3, r22	; 0x03
    16b2:	5d 83       	std	Y+5, r21	; 0x05
    16b4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    16b6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	9d 81       	ldd	r25, Y+5	; 0x05
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	09 f4       	brne	.+2      	; 0x16c2 <DIO_enuGetPinValue+0x28>
    16c0:	7e c0       	rjmp	.+252    	; 0x17be <DIO_enuGetPinValue+0x124>
	{
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	84 30       	cpi	r24, 0x04	; 4
    16c6:	08 f0       	brcs	.+2      	; 0x16ca <DIO_enuGetPinValue+0x30>
    16c8:	77 c0       	rjmp	.+238    	; 0x17b8 <DIO_enuGetPinValue+0x11e>
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	88 30       	cpi	r24, 0x08	; 8
    16ce:	08 f0       	brcs	.+2      	; 0x16d2 <DIO_enuGetPinValue+0x38>
    16d0:	73 c0       	rjmp	.+230    	; 0x17b8 <DIO_enuGetPinValue+0x11e>
			{
				switch(Copy_u8PortID)
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3f 83       	std	Y+7, r19	; 0x07
    16da:	2e 83       	std	Y+6, r18	; 0x06
    16dc:	4e 81       	ldd	r20, Y+6	; 0x06
    16de:	5f 81       	ldd	r21, Y+7	; 0x07
    16e0:	41 30       	cpi	r20, 0x01	; 1
    16e2:	51 05       	cpc	r21, r1
    16e4:	59 f1       	breq	.+86     	; 0x173c <DIO_enuGetPinValue+0xa2>
    16e6:	8e 81       	ldd	r24, Y+6	; 0x06
    16e8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	91 05       	cpc	r25, r1
    16ee:	34 f4       	brge	.+12     	; 0x16fc <DIO_enuGetPinValue+0x62>
    16f0:	2e 81       	ldd	r18, Y+6	; 0x06
    16f2:	3f 81       	ldd	r19, Y+7	; 0x07
    16f4:	21 15       	cp	r18, r1
    16f6:	31 05       	cpc	r19, r1
    16f8:	69 f0       	breq	.+26     	; 0x1714 <DIO_enuGetPinValue+0x7a>
    16fa:	5b c0       	rjmp	.+182    	; 0x17b2 <DIO_enuGetPinValue+0x118>
    16fc:	4e 81       	ldd	r20, Y+6	; 0x06
    16fe:	5f 81       	ldd	r21, Y+7	; 0x07
    1700:	42 30       	cpi	r20, 0x02	; 2
    1702:	51 05       	cpc	r21, r1
    1704:	79 f1       	breq	.+94     	; 0x1764 <DIO_enuGetPinValue+0xca>
    1706:	8e 81       	ldd	r24, Y+6	; 0x06
    1708:	9f 81       	ldd	r25, Y+7	; 0x07
    170a:	83 30       	cpi	r24, 0x03	; 3
    170c:	91 05       	cpc	r25, r1
    170e:	09 f4       	brne	.+2      	; 0x1712 <DIO_enuGetPinValue+0x78>
    1710:	3d c0       	rjmp	.+122    	; 0x178c <DIO_enuGetPinValue+0xf2>
    1712:	4f c0       	rjmp	.+158    	; 0x17b2 <DIO_enuGetPinValue+0x118>
				{
				case DIO_PORTA:
					*Copy_u8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    1714:	e9 e3       	ldi	r30, 0x39	; 57
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a9 01       	movw	r20, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_enuGetPinValue+0x92>
    1728:	55 95       	asr	r21
    172a:	47 95       	ror	r20
    172c:	8a 95       	dec	r24
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <DIO_enuGetPinValue+0x8e>
    1730:	ca 01       	movw	r24, r20
    1732:	81 70       	andi	r24, 0x01	; 1
    1734:	ec 81       	ldd	r30, Y+4	; 0x04
    1736:	fd 81       	ldd	r31, Y+5	; 0x05
    1738:	80 83       	st	Z, r24
    173a:	3b c0       	rjmp	.+118    	; 0x17b2 <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTB:
					*Copy_u8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    173c:	e6 e3       	ldi	r30, 0x36	; 54
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a9 01       	movw	r20, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_enuGetPinValue+0xba>
    1750:	55 95       	asr	r21
    1752:	47 95       	ror	r20
    1754:	8a 95       	dec	r24
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_enuGetPinValue+0xb6>
    1758:	ca 01       	movw	r24, r20
    175a:	81 70       	andi	r24, 0x01	; 1
    175c:	ec 81       	ldd	r30, Y+4	; 0x04
    175e:	fd 81       	ldd	r31, Y+5	; 0x05
    1760:	80 83       	st	Z, r24
    1762:	27 c0       	rjmp	.+78     	; 0x17b2 <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTC:
					*Copy_u8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    1764:	e3 e3       	ldi	r30, 0x33	; 51
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a9 01       	movw	r20, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_enuGetPinValue+0xe2>
    1778:	55 95       	asr	r21
    177a:	47 95       	ror	r20
    177c:	8a 95       	dec	r24
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_enuGetPinValue+0xde>
    1780:	ca 01       	movw	r24, r20
    1782:	81 70       	andi	r24, 0x01	; 1
    1784:	ec 81       	ldd	r30, Y+4	; 0x04
    1786:	fd 81       	ldd	r31, Y+5	; 0x05
    1788:	80 83       	st	Z, r24
    178a:	13 c0       	rjmp	.+38     	; 0x17b2 <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTD:
					*Copy_u8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    178c:	e0 e3       	ldi	r30, 0x30	; 48
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <DIO_enuGetPinValue+0x10a>
    17a0:	55 95       	asr	r21
    17a2:	47 95       	ror	r20
    17a4:	8a 95       	dec	r24
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <DIO_enuGetPinValue+0x106>
    17a8:	ca 01       	movw	r24, r20
    17aa:	81 70       	andi	r24, 0x01	; 1
    17ac:	ec 81       	ldd	r30, Y+4	; 0x04
    17ae:	fd 81       	ldd	r31, Y+5	; 0x05
    17b0:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <DIO_enuGetPinValue+0x128>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_enuGetPinValue+0x128>
			}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c4:	27 96       	adiw	r28, 0x07	; 7
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <KPD_enuGetPresedKey>:
#include "KPD_config.h"
#include "KPD_priv.h"


u8 KPD_enuGetPresedKey(void)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	00 d0       	rcall	.+0      	; 0x17dc <KPD_enuGetPresedKey+0x6>
    17dc:	00 d0       	rcall	.+0      	; 0x17de <KPD_enuGetPresedKey+0x8>
    17de:	0f 92       	push	r0
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NOT_PRESSED_KEY;
    17e4:	84 e1       	ldi	r24, 0x14	; 20
    17e6:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8RowPortArr[] = {KPD_ROW0_PORT , KPD_ROW1_PORT , KPD_ROW2_PORT , KPD_ROW3_PORT};

	static u8 Local_u8RowPinArr[] = {KPD_ROW0_PIN , KPD_ROW1_PIN , KPD_ROW2_PIN , KPD_ROW3_PIN};

	for(Local_u8ColumnIdx = 0 ;Local_u8ColumnIdx < KPD_DIM ;Local_u8ColumnIdx++ )
    17e8:	1a 82       	std	Y+2, r1	; 0x02
    17ea:	7a c0       	rjmp	.+244    	; 0x18e0 <KPD_enuGetPresedKey+0x10a>
	{
		/*	activate current column	*/
		DIO_enuSetPinValue(Local_u8ColPortArr[Local_u8ColumnIdx] ,Local_u8ColPinArr[Local_u8ColumnIdx], DIO_u8LOW);
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	88 2f       	mov	r24, r24
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	fc 01       	movw	r30, r24
    17f4:	ec 58       	subi	r30, 0x8C	; 140
    17f6:	fe 4f       	sbci	r31, 0xFE	; 254
    17f8:	20 81       	ld	r18, Z
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	fc 01       	movw	r30, r24
    1802:	e0 59       	subi	r30, 0x90	; 144
    1804:	fe 4f       	sbci	r31, 0xFE	; 254
    1806:	90 81       	ld	r25, Z
    1808:	82 2f       	mov	r24, r18
    180a:	69 2f       	mov	r22, r25
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
		for(Local_u8RowIdx = 0; Local_u8RowIdx <KPD_DIM ; Local_u8RowIdx++)
    1812:	19 82       	std	Y+1, r1	; 0x01
    1814:	4b c0       	rjmp	.+150    	; 0x18ac <KPD_enuGetPresedKey+0xd6>
		{
			/*	read the current row	*/
			DIO_enuGetPinValue(Local_u8RowPortArr[Local_u8RowIdx],Local_u8RowPinArr[Local_u8RowIdx], &Local_u8PinState);
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	88 2f       	mov	r24, r24
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	fc 01       	movw	r30, r24
    181e:	e4 59       	subi	r30, 0x94	; 148
    1820:	fe 4f       	sbci	r31, 0xFE	; 254
    1822:	40 81       	ld	r20, Z
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	88 2f       	mov	r24, r24
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	fc 01       	movw	r30, r24
    182c:	e8 59       	subi	r30, 0x98	; 152
    182e:	fe 4f       	sbci	r31, 0xFE	; 254
    1830:	90 81       	ld	r25, Z
    1832:	9e 01       	movw	r18, r28
    1834:	2c 5f       	subi	r18, 0xFC	; 252
    1836:	3f 4f       	sbci	r19, 0xFF	; 255
    1838:	84 2f       	mov	r24, r20
    183a:	69 2f       	mov	r22, r25
    183c:	a9 01       	movw	r20, r18
    183e:	0e 94 4d 0b 	call	0x169a	; 0x169a <DIO_enuGetPinValue>
			/*	check switch is pressed	*/
			if(DIO_u8LOW == Local_u8PinState)
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	88 23       	and	r24, r24
    1846:	79 f5       	brne	.+94     	; 0x18a6 <KPD_enuGetPresedKey+0xd0>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	48 2f       	mov	r20, r24
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	ca 01       	movw	r24, r20
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	82 0f       	add	r24, r18
    1860:	93 1f       	adc	r25, r19
    1862:	fc 01       	movw	r30, r24
    1864:	e8 58       	subi	r30, 0x88	; 136
    1866:	fe 4f       	sbci	r31, 0xFE	; 254
    1868:	80 81       	ld	r24, Z
    186a:	8b 83       	std	Y+3, r24	; 0x03
    186c:	16 c0       	rjmp	.+44     	; 0x189a <KPD_enuGetPresedKey+0xc4>
				/* polling (busy waiting) until key is released */
				while(DIO_u8LOW == Local_u8PinState)
				{
					DIO_enuGetPinValue(Local_u8RowPortArr[Local_u8RowIdx],Local_u8RowPinArr[Local_u8RowIdx], &Local_u8PinState);
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	88 2f       	mov	r24, r24
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	fc 01       	movw	r30, r24
    1876:	e4 59       	subi	r30, 0x94	; 148
    1878:	fe 4f       	sbci	r31, 0xFE	; 254
    187a:	40 81       	ld	r20, Z
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	fc 01       	movw	r30, r24
    1884:	e8 59       	subi	r30, 0x98	; 152
    1886:	fe 4f       	sbci	r31, 0xFE	; 254
    1888:	90 81       	ld	r25, Z
    188a:	9e 01       	movw	r18, r28
    188c:	2c 5f       	subi	r18, 0xFC	; 252
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	84 2f       	mov	r24, r20
    1892:	69 2f       	mov	r22, r25
    1894:	a9 01       	movw	r20, r18
    1896:	0e 94 4d 0b 	call	0x169a	; 0x169a <DIO_enuGetPinValue>
			/*	check switch is pressed	*/
			if(DIO_u8LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
				/* polling (busy waiting) until key is released */
				while(DIO_u8LOW == Local_u8PinState)
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	88 23       	and	r24, r24
    189e:	39 f3       	breq	.-50     	; 0x186e <KPD_enuGetPresedKey+0x98>
				{
					DIO_enuGetPinValue(Local_u8RowPortArr[Local_u8RowIdx],Local_u8RowPinArr[Local_u8RowIdx], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	8d 83       	std	Y+5, r24	; 0x05
    18a4:	23 c0       	rjmp	.+70     	; 0x18ec <KPD_enuGetPresedKey+0x116>

	for(Local_u8ColumnIdx = 0 ;Local_u8ColumnIdx < KPD_DIM ;Local_u8ColumnIdx++ )
	{
		/*	activate current column	*/
		DIO_enuSetPinValue(Local_u8ColPortArr[Local_u8ColumnIdx] ,Local_u8ColPinArr[Local_u8ColumnIdx], DIO_u8LOW);
		for(Local_u8RowIdx = 0; Local_u8RowIdx <KPD_DIM ; Local_u8RowIdx++)
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	8f 5f       	subi	r24, 0xFF	; 255
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	84 30       	cpi	r24, 0x04	; 4
    18b0:	08 f4       	brcc	.+2      	; 0x18b4 <KPD_enuGetPresedKey+0xde>
    18b2:	b1 cf       	rjmp	.-158    	; 0x1816 <KPD_enuGetPresedKey+0x40>
				}
				return Local_u8PressedKey;
			}
		}
		/*	deactivate current column	*/
		DIO_enuSetPinValue(Local_u8ColPortArr[Local_u8ColumnIdx] ,Local_u8ColPinArr[Local_u8ColumnIdx], DIO_u8HIGH);
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	88 2f       	mov	r24, r24
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	fc 01       	movw	r30, r24
    18bc:	ec 58       	subi	r30, 0x8C	; 140
    18be:	fe 4f       	sbci	r31, 0xFE	; 254
    18c0:	20 81       	ld	r18, Z
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	fc 01       	movw	r30, r24
    18ca:	e0 59       	subi	r30, 0x90	; 144
    18cc:	fe 4f       	sbci	r31, 0xFE	; 254
    18ce:	90 81       	ld	r25, Z
    18d0:	82 2f       	mov	r24, r18
    18d2:	69 2f       	mov	r22, r25
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>

	static u8 Local_u8RowPortArr[] = {KPD_ROW0_PORT , KPD_ROW1_PORT , KPD_ROW2_PORT , KPD_ROW3_PORT};

	static u8 Local_u8RowPinArr[] = {KPD_ROW0_PIN , KPD_ROW1_PIN , KPD_ROW2_PIN , KPD_ROW3_PIN};

	for(Local_u8ColumnIdx = 0 ;Local_u8ColumnIdx < KPD_DIM ;Local_u8ColumnIdx++ )
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	8f 5f       	subi	r24, 0xFF	; 255
    18de:	8a 83       	std	Y+2, r24	; 0x02
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	84 30       	cpi	r24, 0x04	; 4
    18e4:	08 f4       	brcc	.+2      	; 0x18e8 <KPD_enuGetPresedKey+0x112>
    18e6:	82 cf       	rjmp	.-252    	; 0x17ec <KPD_enuGetPresedKey+0x16>
		}
		/*	deactivate current column	*/
		DIO_enuSetPinValue(Local_u8ColPortArr[Local_u8ColumnIdx] ,Local_u8ColPinArr[Local_u8ColumnIdx], DIO_u8HIGH);
	}

	return Local_u8PressedKey;
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	8d 81       	ldd	r24, Y+5	; 0x05
}
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	e9 97       	sbiw	r28, 0x39	; 57
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ErrorState = ES_NOK;
    1912:	19 ae       	std	Y+57, r1	; 0x39
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	62 e0       	ldi	r22, 0x02	; 2
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	67 e0       	ldi	r22, 0x07	; 7
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	66 e0       	ldi	r22, 0x06	; 6
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	65 e0       	ldi	r22, 0x05	; 5
    194a:	41 e0       	ldi	r20, 0x01	; 1
    194c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	64 e0       	ldi	r22, 0x04	; 4
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_enuSetPinDirection>
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	ac e0       	ldi	r26, 0x0C	; 12
    1960:	b2 e4       	ldi	r27, 0x42	; 66
    1962:	8d ab       	std	Y+53, r24	; 0x35
    1964:	9e ab       	std	Y+54, r25	; 0x36
    1966:	af ab       	std	Y+55, r26	; 0x37
    1968:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196a:	6d a9       	ldd	r22, Y+53	; 0x35
    196c:	7e a9       	ldd	r23, Y+54	; 0x36
    196e:	8f a9       	ldd	r24, Y+55	; 0x37
    1970:	98 ad       	ldd	r25, Y+56	; 0x38
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	4a e7       	ldi	r20, 0x7A	; 122
    1978:	53 e4       	ldi	r21, 0x43	; 67
    197a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	89 ab       	std	Y+49, r24	; 0x31
    1984:	9a ab       	std	Y+50, r25	; 0x32
    1986:	ab ab       	std	Y+51, r26	; 0x33
    1988:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    198a:	69 a9       	ldd	r22, Y+49	; 0x31
    198c:	7a a9       	ldd	r23, Y+50	; 0x32
    198e:	8b a9       	ldd	r24, Y+51	; 0x33
    1990:	9c a9       	ldd	r25, Y+52	; 0x34
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e8       	ldi	r20, 0x80	; 128
    1998:	5f e3       	ldi	r21, 0x3F	; 63
    199a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    199e:	88 23       	and	r24, r24
    19a0:	2c f4       	brge	.+10     	; 0x19ac <LCD_enuInit+0xae>
		__ticks = 1;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	98 ab       	std	Y+48, r25	; 0x30
    19a8:	8f a7       	std	Y+47, r24	; 0x2f
    19aa:	3f c0       	rjmp	.+126    	; 0x1a2a <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    19ac:	69 a9       	ldd	r22, Y+49	; 0x31
    19ae:	7a a9       	ldd	r23, Y+50	; 0x32
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	9c a9       	ldd	r25, Y+52	; 0x34
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	3f ef       	ldi	r19, 0xFF	; 255
    19b8:	4f e7       	ldi	r20, 0x7F	; 127
    19ba:	57 e4       	ldi	r21, 0x47	; 71
    19bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19c0:	18 16       	cp	r1, r24
    19c2:	4c f5       	brge	.+82     	; 0x1a16 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c4:	6d a9       	ldd	r22, Y+53	; 0x35
    19c6:	7e a9       	ldd	r23, Y+54	; 0x36
    19c8:	8f a9       	ldd	r24, Y+55	; 0x37
    19ca:	98 ad       	ldd	r25, Y+56	; 0x38
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e2       	ldi	r20, 0x20	; 32
    19d2:	51 e4       	ldi	r21, 0x41	; 65
    19d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	bc 01       	movw	r22, r24
    19de:	cd 01       	movw	r24, r26
    19e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	98 ab       	std	Y+48, r25	; 0x30
    19ea:	8f a7       	std	Y+47, r24	; 0x2f
    19ec:	0f c0       	rjmp	.+30     	; 0x1a0c <LCD_enuInit+0x10e>
    19ee:	89 e1       	ldi	r24, 0x19	; 25
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9e a7       	std	Y+46, r25	; 0x2e
    19f4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    19f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <LCD_enuInit+0xfc>
    19fe:	9e a7       	std	Y+46, r25	; 0x2e
    1a00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a04:	98 a9       	ldd	r25, Y+48	; 0x30
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	98 ab       	std	Y+48, r25	; 0x30
    1a0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	69 f7       	brne	.-38     	; 0x19ee <LCD_enuInit+0xf0>
    1a14:	14 c0       	rjmp	.+40     	; 0x1a3e <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a16:	69 a9       	ldd	r22, Y+49	; 0x31
    1a18:	7a a9       	ldd	r23, Y+50	; 0x32
    1a1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	98 ab       	std	Y+48, r25	; 0x30
    1a28:	8f a7       	std	Y+47, r24	; 0x2f
    1a2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a2e:	9c a7       	std	Y+44, r25	; 0x2c
    1a30:	8b a7       	std	Y+43, r24	; 0x2b
    1a32:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a34:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <LCD_enuInit+0x138>
    1a3a:	9c a7       	std	Y+44, r25	; 0x2c
    1a3c:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	63 e0       	ldi	r22, 0x03	; 3
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	61 e0       	ldi	r22, 0x01	; 1
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_enuSetPinDirection>

	//function set
	LCD_invidSendCommend(0x38);
    1a66:	88 e3       	ldi	r24, 0x38	; 56
    1a68:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_invidSendCommend>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 e8       	ldi	r26, 0x80	; 128
    1a72:	bf e3       	ldi	r27, 0x3F	; 63
    1a74:	8f a3       	std	Y+39, r24	; 0x27
    1a76:	98 a7       	std	Y+40, r25	; 0x28
    1a78:	a9 a7       	std	Y+41, r26	; 0x29
    1a7a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a80:	89 a5       	ldd	r24, Y+41	; 0x29
    1a82:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	53 e4       	ldi	r21, 0x43	; 67
    1a8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8b a3       	std	Y+35, r24	; 0x23
    1a96:	9c a3       	std	Y+36, r25	; 0x24
    1a98:	ad a3       	std	Y+37, r26	; 0x25
    1a9a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa0:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa2:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <LCD_enuInit+0x1c0>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9a a3       	std	Y+34, r25	; 0x22
    1aba:	89 a3       	std	Y+33, r24	; 0x21
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    1abe:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad8:	78 a5       	ldd	r23, Y+40	; 0x28
    1ada:	89 a5       	ldd	r24, Y+41	; 0x29
    1adc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9a a3       	std	Y+34, r25	; 0x22
    1afc:	89 a3       	std	Y+33, r24	; 0x21
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <LCD_enuInit+0x220>
    1b00:	89 e1       	ldi	r24, 0x19	; 25
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	98 a3       	std	Y+32, r25	; 0x20
    1b06:	8f 8f       	std	Y+31, r24	; 0x1f
    1b08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b0a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_enuInit+0x20e>
    1b10:	98 a3       	std	Y+32, r25	; 0x20
    1b12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	89 a1       	ldd	r24, Y+33	; 0x21
    1b16:	9a a1       	ldd	r25, Y+34	; 0x22
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9a a3       	std	Y+34, r25	; 0x22
    1b1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b20:	9a a1       	ldd	r25, Y+34	; 0x22
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <LCD_enuInit+0x202>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	6b a1       	ldd	r22, Y+35	; 0x23
    1b2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9a a3       	std	Y+34, r25	; 0x22
    1b3a:	89 a3       	std	Y+33, r24	; 0x21
    1b3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b40:	9e 8f       	std	Y+30, r25	; 0x1e
    1b42:	8d 8f       	std	Y+29, r24	; 0x1d
    1b44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_enuInit+0x24a>
    1b4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b4e:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    1b50:	8f e0       	ldi	r24, 0x0F	; 15
    1b52:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_invidSendCommend>
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a0 e8       	ldi	r26, 0x80	; 128
    1b5c:	bf e3       	ldi	r27, 0x3F	; 63
    1b5e:	89 8f       	std	Y+25, r24	; 0x19
    1b60:	9a 8f       	std	Y+26, r25	; 0x1a
    1b62:	ab 8f       	std	Y+27, r26	; 0x1b
    1b64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b66:	69 8d       	ldd	r22, Y+25	; 0x19
    1b68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	4a e7       	ldi	r20, 0x7A	; 122
    1b74:	53 e4       	ldi	r21, 0x43	; 67
    1b76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	8d 8b       	std	Y+21, r24	; 0x15
    1b80:	9e 8b       	std	Y+22, r25	; 0x16
    1b82:	af 8b       	std	Y+23, r26	; 0x17
    1b84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b86:	6d 89       	ldd	r22, Y+21	; 0x15
    1b88:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e8       	ldi	r20, 0x80	; 128
    1b94:	5f e3       	ldi	r21, 0x3F	; 63
    1b96:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b9a:	88 23       	and	r24, r24
    1b9c:	2c f4       	brge	.+10     	; 0x1ba8 <LCD_enuInit+0x2aa>
		__ticks = 1;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9c 8b       	std	Y+20, r25	; 0x14
    1ba4:	8b 8b       	std	Y+19, r24	; 0x13
    1ba6:	3f c0       	rjmp	.+126    	; 0x1c26 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    1ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    1baa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bac:	8f 89       	ldd	r24, Y+23	; 0x17
    1bae:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	3f ef       	ldi	r19, 0xFF	; 255
    1bb4:	4f e7       	ldi	r20, 0x7F	; 127
    1bb6:	57 e4       	ldi	r21, 0x47	; 71
    1bb8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bbc:	18 16       	cp	r1, r24
    1bbe:	4c f5       	brge	.+82     	; 0x1c12 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e2       	ldi	r20, 0x20	; 32
    1bce:	51 e4       	ldi	r21, 0x41	; 65
    1bd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9c 8b       	std	Y+20, r25	; 0x14
    1be6:	8b 8b       	std	Y+19, r24	; 0x13
    1be8:	0f c0       	rjmp	.+30     	; 0x1c08 <LCD_enuInit+0x30a>
    1bea:	89 e1       	ldi	r24, 0x19	; 25
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9a 8b       	std	Y+18, r25	; 0x12
    1bf0:	89 8b       	std	Y+17, r24	; 0x11
    1bf2:	89 89       	ldd	r24, Y+17	; 0x11
    1bf4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <LCD_enuInit+0x2f8>
    1bfa:	9a 8b       	std	Y+18, r25	; 0x12
    1bfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1c00:	9c 89       	ldd	r25, Y+20	; 0x14
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	9c 8b       	std	Y+20, r25	; 0x14
    1c06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c08:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	69 f7       	brne	.-38     	; 0x1bea <LCD_enuInit+0x2ec>
    1c10:	14 c0       	rjmp	.+40     	; 0x1c3a <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c12:	6d 89       	ldd	r22, Y+21	; 0x15
    1c14:	7e 89       	ldd	r23, Y+22	; 0x16
    1c16:	8f 89       	ldd	r24, Y+23	; 0x17
    1c18:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9c 8b       	std	Y+20, r25	; 0x14
    1c24:	8b 8b       	std	Y+19, r24	; 0x13
    1c26:	8b 89       	ldd	r24, Y+19	; 0x13
    1c28:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2a:	98 8b       	std	Y+16, r25	; 0x10
    1c2c:	8f 87       	std	Y+15, r24	; 0x0f
    1c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c30:	98 89       	ldd	r25, Y+16	; 0x10
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <LCD_enuInit+0x334>
    1c36:	98 8b       	std	Y+16, r25	; 0x10
    1c38:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_invidSendCommend>
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a0 e0       	ldi	r26, 0x00	; 0
    1c46:	b0 e4       	ldi	r27, 0x40	; 64
    1c48:	8b 87       	std	Y+11, r24	; 0x0b
    1c4a:	9c 87       	std	Y+12, r25	; 0x0c
    1c4c:	ad 87       	std	Y+13, r26	; 0x0d
    1c4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a e7       	ldi	r20, 0x7A	; 122
    1c5e:	53 e4       	ldi	r21, 0x43	; 67
    1c60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	8f 83       	std	Y+7, r24	; 0x07
    1c6a:	98 87       	std	Y+8, r25	; 0x08
    1c6c:	a9 87       	std	Y+9, r26	; 0x09
    1c6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c70:	6f 81       	ldd	r22, Y+7	; 0x07
    1c72:	78 85       	ldd	r23, Y+8	; 0x08
    1c74:	89 85       	ldd	r24, Y+9	; 0x09
    1c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e8       	ldi	r20, 0x80	; 128
    1c7e:	5f e3       	ldi	r21, 0x3F	; 63
    1c80:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c84:	88 23       	and	r24, r24
    1c86:	2c f4       	brge	.+10     	; 0x1c92 <LCD_enuInit+0x394>
		__ticks = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	3f c0       	rjmp	.+126    	; 0x1d10 <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    1c92:	6f 81       	ldd	r22, Y+7	; 0x07
    1c94:	78 85       	ldd	r23, Y+8	; 0x08
    1c96:	89 85       	ldd	r24, Y+9	; 0x09
    1c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	3f ef       	ldi	r19, 0xFF	; 255
    1c9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ca0:	57 e4       	ldi	r21, 0x47	; 71
    1ca2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ca6:	18 16       	cp	r1, r24
    1ca8:	4c f5       	brge	.+82     	; 0x1cfc <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e2       	ldi	r20, 0x20	; 32
    1cb8:	51 e4       	ldi	r21, 0x41	; 65
    1cba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
    1cd2:	0f c0       	rjmp	.+30     	; 0x1cf2 <LCD_enuInit+0x3f4>
    1cd4:	89 e1       	ldi	r24, 0x19	; 25
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9c 83       	std	Y+4, r25	; 0x04
    1cda:	8b 83       	std	Y+3, r24	; 0x03
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <LCD_enuInit+0x3e2>
    1ce4:	9c 83       	std	Y+4, r25	; 0x04
    1ce6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	69 f7       	brne	.-38     	; 0x1cd4 <LCD_enuInit+0x3d6>
    1cfa:	14 c0       	rjmp	.+40     	; 0x1d24 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfe:	78 85       	ldd	r23, Y+8	; 0x08
    1d00:	89 85       	ldd	r24, Y+9	; 0x09
    1d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	9a 83       	std	Y+2, r25	; 0x02
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_enuInit+0x41e>
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    1d24:	86 e0       	ldi	r24, 0x06	; 6
    1d26:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_invidSendCommend>


	return Local_u8ErrorState;
    1d2a:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1d2c:	e9 96       	adiw	r28, 0x39	; 57
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <LCD_enuDisplayChar+0x6>
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = ES_NOK;
    1d4a:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(RS_PORT,RS_PIN , DIO_u8HIGH);
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	LCD_Latch(Copy_u8Data);
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_Latch>
	Local_u8ErrorState = ES_OK;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <LCD_enuSendCommand+0x6>
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = ES_NOK;
    1d78:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	LCD_Latch(Copy_u8Command);
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_Latch>
	Local_u8ErrorState =ES_OK;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	89 83       	std	Y+1, r24	; 0x01


	return Local_u8ErrorState;
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <LCD_Latch>:

static void LCD_Latch(u8 Copy_u8Data)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	6d 97       	sbiw	r28, 0x1d	; 29
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
		DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	61 e0       	ldi	r22, 0x01	; 1
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	62 e0       	ldi	r22, 0x02	; 2
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
		//write Data
		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1dc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dc6:	98 2f       	mov	r25, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	99 27       	eor	r25, r25
    1dcc:	99 1f       	adc	r25, r25
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	67 e0       	ldi	r22, 0x07	; 7
    1dd2:	49 2f       	mov	r20, r25
    1dd4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1dd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dda:	82 95       	swap	r24
    1ddc:	86 95       	lsr	r24
    1dde:	86 95       	lsr	r24
    1de0:	83 70       	andi	r24, 0x03	; 3
    1de2:	98 2f       	mov	r25, r24
    1de4:	91 70       	andi	r25, 0x01	; 1
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	66 e0       	ldi	r22, 0x06	; 6
    1dea:	49 2f       	mov	r20, r25
    1dec:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1df0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df2:	82 95       	swap	r24
    1df4:	86 95       	lsr	r24
    1df6:	87 70       	andi	r24, 0x07	; 7
    1df8:	98 2f       	mov	r25, r24
    1dfa:	91 70       	andi	r25, 0x01	; 1
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	65 e0       	ldi	r22, 0x05	; 5
    1e00:	49 2f       	mov	r20, r25
    1e02:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1e06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e08:	82 95       	swap	r24
    1e0a:	8f 70       	andi	r24, 0x0F	; 15
    1e0c:	98 2f       	mov	r25, r24
    1e0e:	91 70       	andi	r25, 0x01	; 1
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	64 e0       	ldi	r22, 0x04	; 4
    1e14:	49 2f       	mov	r20, r25
    1e16:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>

	#if LCD_MODE == EIGHT_BIT

		DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    1e1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e1c:	86 95       	lsr	r24
    1e1e:	86 95       	lsr	r24
    1e20:	86 95       	lsr	r24
    1e22:	98 2f       	mov	r25, r24
    1e24:	91 70       	andi	r25, 0x01	; 1
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	63 e0       	ldi	r22, 0x03	; 3
    1e2a:	49 2f       	mov	r20, r25
    1e2c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    1e30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e32:	86 95       	lsr	r24
    1e34:	86 95       	lsr	r24
    1e36:	98 2f       	mov	r25, r24
    1e38:	91 70       	andi	r25, 0x01	; 1
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	62 e0       	ldi	r22, 0x02	; 2
    1e3e:	49 2f       	mov	r20, r25
    1e40:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    1e44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e46:	86 95       	lsr	r24
    1e48:	98 2f       	mov	r25, r24
    1e4a:	91 70       	andi	r25, 0x01	; 1
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	61 e0       	ldi	r22, 0x01	; 1
    1e50:	49 2f       	mov	r20, r25
    1e52:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    1e56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e58:	98 2f       	mov	r25, r24
    1e5a:	91 70       	andi	r25, 0x01	; 1
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	49 2f       	mov	r20, r25
    1e62:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	#elif LCD_MODE == FOUR_BIT

	#endif

		// Enable latch
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	62 e0       	ldi	r22, 0x02	; 2
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a0 e2       	ldi	r26, 0x20	; 32
    1e76:	b1 e4       	ldi	r27, 0x41	; 65
    1e78:	89 8f       	std	Y+25, r24	; 0x19
    1e7a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e7c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e80:	69 8d       	ldd	r22, Y+25	; 0x19
    1e82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a e7       	ldi	r20, 0x7A	; 122
    1e8e:	53 e4       	ldi	r21, 0x43	; 67
    1e90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	8d 8b       	std	Y+21, r24	; 0x15
    1e9a:	9e 8b       	std	Y+22, r25	; 0x16
    1e9c:	af 8b       	std	Y+23, r26	; 0x17
    1e9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <LCD_Latch+0x128>
		__ticks = 1;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	9c 8b       	std	Y+20, r25	; 0x14
    1ebe:	8b 8b       	std	Y+19, r24	; 0x13
    1ec0:	3f c0       	rjmp	.+126    	; 0x1f40 <LCD_Latch+0x1a6>
	else if (__tmp > 65535)
    1ec2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	4c f5       	brge	.+82     	; 0x1f2c <LCD_Latch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eda:	69 8d       	ldd	r22, Y+25	; 0x19
    1edc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	9c 8b       	std	Y+20, r25	; 0x14
    1f00:	8b 8b       	std	Y+19, r24	; 0x13
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <LCD_Latch+0x188>
    1f04:	89 e1       	ldi	r24, 0x19	; 25
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9a 8b       	std	Y+18, r25	; 0x12
    1f0a:	89 8b       	std	Y+17, r24	; 0x11
    1f0c:	89 89       	ldd	r24, Y+17	; 0x11
    1f0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <LCD_Latch+0x176>
    1f14:	9a 8b       	std	Y+18, r25	; 0x12
    1f16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f18:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	9c 8b       	std	Y+20, r25	; 0x14
    1f20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	8b 89       	ldd	r24, Y+19	; 0x13
    1f24:	9c 89       	ldd	r25, Y+20	; 0x14
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	69 f7       	brne	.-38     	; 0x1f04 <LCD_Latch+0x16a>
    1f2a:	14 c0       	rjmp	.+40     	; 0x1f54 <LCD_Latch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f30:	8f 89       	ldd	r24, Y+23	; 0x17
    1f32:	98 8d       	ldd	r25, Y+24	; 0x18
    1f34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9c 8b       	std	Y+20, r25	; 0x14
    1f3e:	8b 8b       	std	Y+19, r24	; 0x13
    1f40:	8b 89       	ldd	r24, Y+19	; 0x13
    1f42:	9c 89       	ldd	r25, Y+20	; 0x14
    1f44:	98 8b       	std	Y+16, r25	; 0x10
    1f46:	8f 87       	std	Y+15, r24	; 0x0f
    1f48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4a:	98 89       	ldd	r25, Y+16	; 0x10
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_Latch+0x1b2>
    1f50:	98 8b       	std	Y+16, r25	; 0x10
    1f52:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	62 e0       	ldi	r22, 0x02	; 2
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	a0 e2       	ldi	r26, 0x20	; 32
    1f64:	b1 e4       	ldi	r27, 0x41	; 65
    1f66:	8b 87       	std	Y+11, r24	; 0x0b
    1f68:	9c 87       	std	Y+12, r25	; 0x0c
    1f6a:	ad 87       	std	Y+13, r26	; 0x0d
    1f6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	4a e7       	ldi	r20, 0x7A	; 122
    1f7c:	53 e4       	ldi	r21, 0x43	; 67
    1f7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	8f 83       	std	Y+7, r24	; 0x07
    1f88:	98 87       	std	Y+8, r25	; 0x08
    1f8a:	a9 87       	std	Y+9, r26	; 0x09
    1f8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f90:	78 85       	ldd	r23, Y+8	; 0x08
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e8       	ldi	r20, 0x80	; 128
    1f9c:	5f e3       	ldi	r21, 0x3F	; 63
    1f9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fa2:	88 23       	and	r24, r24
    1fa4:	2c f4       	brge	.+10     	; 0x1fb0 <LCD_Latch+0x216>
		__ticks = 1;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	3f c0       	rjmp	.+126    	; 0x202e <LCD_Latch+0x294>
	else if (__tmp > 65535)
    1fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb2:	78 85       	ldd	r23, Y+8	; 0x08
    1fb4:	89 85       	ldd	r24, Y+9	; 0x09
    1fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	3f ef       	ldi	r19, 0xFF	; 255
    1fbc:	4f e7       	ldi	r20, 0x7F	; 127
    1fbe:	57 e4       	ldi	r21, 0x47	; 71
    1fc0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fc4:	18 16       	cp	r1, r24
    1fc6:	4c f5       	brge	.+82     	; 0x201a <LCD_Latch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e2       	ldi	r20, 0x20	; 32
    1fd6:	51 e4       	ldi	r21, 0x41	; 65
    1fd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <LCD_Latch+0x276>
    1ff2:	89 e1       	ldi	r24, 0x19	; 25
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9c 83       	std	Y+4, r25	; 0x04
    1ff8:	8b 83       	std	Y+3, r24	; 0x03
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <LCD_Latch+0x264>
    2002:	9c 83       	std	Y+4, r25	; 0x04
    2004:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	9e 81       	ldd	r25, Y+6	; 0x06
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	9e 81       	ldd	r25, Y+6	; 0x06
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	69 f7       	brne	.-38     	; 0x1ff2 <LCD_Latch+0x258>
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <LCD_Latch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	9a 83       	std	Y+2, r25	; 0x02
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <LCD_Latch+0x2a0>
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	89 83       	std	Y+1, r24	; 0x01


		_delay_ms(10);
}
    2042:	6d 96       	adiw	r28, 0x1d	; 29
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <LCD_invidSendCommend>:
inline static void LCD_invidSendCommend(u8 Copy_u8Command)
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	2f 97       	sbiw	r28, 0x0f	; 15
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	61 e0       	ldi	r22, 0x01	; 1
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	62 e0       	ldi	r22, 0x02	; 2
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2088:	8f 85       	ldd	r24, Y+15	; 0x0f
    208a:	98 2f       	mov	r25, r24
    208c:	99 1f       	adc	r25, r25
    208e:	99 27       	eor	r25, r25
    2090:	99 1f       	adc	r25, r25
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	67 e0       	ldi	r22, 0x07	; 7
    2096:	49 2f       	mov	r20, r25
    2098:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    209c:	8f 85       	ldd	r24, Y+15	; 0x0f
    209e:	82 95       	swap	r24
    20a0:	86 95       	lsr	r24
    20a2:	86 95       	lsr	r24
    20a4:	83 70       	andi	r24, 0x03	; 3
    20a6:	98 2f       	mov	r25, r24
    20a8:	91 70       	andi	r25, 0x01	; 1
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	66 e0       	ldi	r22, 0x06	; 6
    20ae:	49 2f       	mov	r20, r25
    20b0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    20b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b6:	82 95       	swap	r24
    20b8:	86 95       	lsr	r24
    20ba:	87 70       	andi	r24, 0x07	; 7
    20bc:	98 2f       	mov	r25, r24
    20be:	91 70       	andi	r25, 0x01	; 1
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	65 e0       	ldi	r22, 0x05	; 5
    20c4:	49 2f       	mov	r20, r25
    20c6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    20ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    20cc:	82 95       	swap	r24
    20ce:	8f 70       	andi	r24, 0x0F	; 15
    20d0:	98 2f       	mov	r25, r24
    20d2:	91 70       	andi	r25, 0x01	; 1
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	64 e0       	ldi	r22, 0x04	; 4
    20d8:	49 2f       	mov	r20, r25
    20da:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    20de:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e0:	86 95       	lsr	r24
    20e2:	86 95       	lsr	r24
    20e4:	86 95       	lsr	r24
    20e6:	98 2f       	mov	r25, r24
    20e8:	91 70       	andi	r25, 0x01	; 1
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	63 e0       	ldi	r22, 0x03	; 3
    20ee:	49 2f       	mov	r20, r25
    20f0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    20f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f6:	86 95       	lsr	r24
    20f8:	86 95       	lsr	r24
    20fa:	98 2f       	mov	r25, r24
    20fc:	91 70       	andi	r25, 0x01	; 1
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	62 e0       	ldi	r22, 0x02	; 2
    2102:	49 2f       	mov	r20, r25
    2104:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    2108:	8f 85       	ldd	r24, Y+15	; 0x0f
    210a:	86 95       	lsr	r24
    210c:	98 2f       	mov	r25, r24
    210e:	91 70       	andi	r25, 0x01	; 1
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	61 e0       	ldi	r22, 0x01	; 1
    2114:	49 2f       	mov	r20, r25
    2116:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    211a:	8f 85       	ldd	r24, Y+15	; 0x0f
    211c:	98 2f       	mov	r25, r24
    211e:	91 70       	andi	r25, 0x01	; 1
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	49 2f       	mov	r20, r25
    2126:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	62 e0       	ldi	r22, 0x02	; 2
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e2       	ldi	r26, 0x20	; 32
    213a:	b1 e4       	ldi	r27, 0x41	; 65
    213c:	8b 87       	std	Y+11, r24	; 0x0b
    213e:	9c 87       	std	Y+12, r25	; 0x0c
    2140:	ad 87       	std	Y+13, r26	; 0x0d
    2142:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	6b 85       	ldd	r22, Y+11	; 0x0b
    2146:	7c 85       	ldd	r23, Y+12	; 0x0c
    2148:	8d 85       	ldd	r24, Y+13	; 0x0d
    214a:	9e 85       	ldd	r25, Y+14	; 0x0e
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a e7       	ldi	r20, 0x7A	; 122
    2152:	53 e4       	ldi	r21, 0x43	; 67
    2154:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8f 83       	std	Y+7, r24	; 0x07
    215e:	98 87       	std	Y+8, r25	; 0x08
    2160:	a9 87       	std	Y+9, r26	; 0x09
    2162:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	2c f4       	brge	.+10     	; 0x2186 <LCD_invidSendCommend+0x132>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	3f c0       	rjmp	.+126    	; 0x2204 <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    2186:	6f 81       	ldd	r22, Y+7	; 0x07
    2188:	78 85       	ldd	r23, Y+8	; 0x08
    218a:	89 85       	ldd	r24, Y+9	; 0x09
    218c:	9a 85       	ldd	r25, Y+10	; 0x0a
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	4c f5       	brge	.+82     	; 0x21f0 <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219e:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <LCD_invidSendCommend+0x192>
    21c8:	89 e1       	ldi	r24, 0x19	; 25
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	8b 83       	std	Y+3, r24	; 0x03
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_invidSendCommend+0x180>
    21d8:	9c 83       	std	Y+4, r25	; 0x04
    21da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	9e 83       	std	Y+6, r25	; 0x06
    21e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <LCD_invidSendCommend+0x174>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	6f 81       	ldd	r22, Y+7	; 0x07
    21f2:	78 85       	ldd	r23, Y+8	; 0x08
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_invidSendCommend+0x1bc>
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	62 e0       	ldi	r22, 0x02	; 2
    221c:	40 e0       	ldi	r20, 0x00	; 0
    221e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_enuSetPinValue>
}
    2222:	2f 96       	adiw	r28, 0x0f	; 15
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <CAL_u32SUM>:
#include "stdTypes.h"
#include "cal.h"
#include "LCD_int.h"

void CAL_u32SUM(u8 num1[],u8 num2[],u8 n, u8 m)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	66 97       	sbiw	r28, 0x16	; 22
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	9a 8b       	std	Y+18, r25	; 0x12
    224a:	89 8b       	std	Y+17, r24	; 0x11
    224c:	7c 8b       	std	Y+20, r23	; 0x14
    224e:	6b 8b       	std	Y+19, r22	; 0x13
    2250:	4d 8b       	std	Y+21, r20	; 0x15
    2252:	2e 8b       	std	Y+22, r18	; 0x16
	u8 n1 = 0,n2 = 0,res,Res[NUM_SIZE],dec=1;
    2254:	1c 86       	std	Y+12, r1	; 0x0c
    2256:	1b 86       	std	Y+11, r1	; 0x0b
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	89 87       	std	Y+9, r24	; 0x09
	for(u8 counter = n; counter > 0;counter--)
    225c:	8d 89       	ldd	r24, Y+21	; 0x15
    225e:	88 87       	std	Y+8, r24	; 0x08
    2260:	24 c0       	rjmp	.+72     	; 0x22aa <CAL_u32SUM+0x76>
	{
		n1 += (dec * num1[counter-1]);
    2262:	88 85       	ldd	r24, Y+8	; 0x08
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9c 01       	movw	r18, r24
    226a:	21 50       	subi	r18, 0x01	; 1
    226c:	30 40       	sbci	r19, 0x00	; 0
    226e:	89 89       	ldd	r24, Y+17	; 0x11
    2270:	9a 89       	ldd	r25, Y+18	; 0x12
    2272:	fc 01       	movw	r30, r24
    2274:	e2 0f       	add	r30, r18
    2276:	f3 1f       	adc	r31, r19
    2278:	90 81       	ld	r25, Z
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	98 9f       	mul	r25, r24
    227e:	90 2d       	mov	r25, r0
    2280:	11 24       	eor	r1, r1
    2282:	8c 85       	ldd	r24, Y+12	; 0x0c
    2284:	89 0f       	add	r24, r25
    2286:	8c 87       	std	Y+12, r24	; 0x0c
		dec *= 10;
    2288:	89 85       	ldd	r24, Y+9	; 0x09
    228a:	88 2f       	mov	r24, r24
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9c 01       	movw	r18, r24
    2290:	22 0f       	add	r18, r18
    2292:	33 1f       	adc	r19, r19
    2294:	c9 01       	movw	r24, r18
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	82 0f       	add	r24, r18
    22a0:	93 1f       	adc	r25, r19
    22a2:	89 87       	std	Y+9, r24	; 0x09
#include "LCD_int.h"

void CAL_u32SUM(u8 num1[],u8 num2[],u8 n, u8 m)
{
	u8 n1 = 0,n2 = 0,res,Res[NUM_SIZE],dec=1;
	for(u8 counter = n; counter > 0;counter--)
    22a4:	88 85       	ldd	r24, Y+8	; 0x08
    22a6:	81 50       	subi	r24, 0x01	; 1
    22a8:	88 87       	std	Y+8, r24	; 0x08
    22aa:	88 85       	ldd	r24, Y+8	; 0x08
    22ac:	88 23       	and	r24, r24
    22ae:	c9 f6       	brne	.-78     	; 0x2262 <CAL_u32SUM+0x2e>
	{
		n1 += (dec * num1[counter-1]);
		dec *= 10;
	}
	dec = 1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	89 87       	std	Y+9, r24	; 0x09
	for(u8 counter = m; counter > 0;counter--)
    22b4:	8e 89       	ldd	r24, Y+22	; 0x16
    22b6:	8f 83       	std	Y+7, r24	; 0x07
    22b8:	24 c0       	rjmp	.+72     	; 0x2302 <CAL_u32SUM+0xce>
	{
		n2 += (dec * num2[counter-1]);
    22ba:	8f 81       	ldd	r24, Y+7	; 0x07
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9c 01       	movw	r18, r24
    22c2:	21 50       	subi	r18, 0x01	; 1
    22c4:	30 40       	sbci	r19, 0x00	; 0
    22c6:	8b 89       	ldd	r24, Y+19	; 0x13
    22c8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ca:	fc 01       	movw	r30, r24
    22cc:	e2 0f       	add	r30, r18
    22ce:	f3 1f       	adc	r31, r19
    22d0:	90 81       	ld	r25, Z
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	98 9f       	mul	r25, r24
    22d6:	90 2d       	mov	r25, r0
    22d8:	11 24       	eor	r1, r1
    22da:	8b 85       	ldd	r24, Y+11	; 0x0b
    22dc:	89 0f       	add	r24, r25
    22de:	8b 87       	std	Y+11, r24	; 0x0b
		dec *= 10;
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	88 2f       	mov	r24, r24
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	9c 01       	movw	r18, r24
    22e8:	22 0f       	add	r18, r18
    22ea:	33 1f       	adc	r19, r19
    22ec:	c9 01       	movw	r24, r18
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	82 0f       	add	r24, r18
    22f8:	93 1f       	adc	r25, r19
    22fa:	89 87       	std	Y+9, r24	; 0x09
	{
		n1 += (dec * num1[counter-1]);
		dec *= 10;
	}
	dec = 1;
	for(u8 counter = m; counter > 0;counter--)
    22fc:	8f 81       	ldd	r24, Y+7	; 0x07
    22fe:	81 50       	subi	r24, 0x01	; 1
    2300:	8f 83       	std	Y+7, r24	; 0x07
    2302:	8f 81       	ldd	r24, Y+7	; 0x07
    2304:	88 23       	and	r24, r24
    2306:	c9 f6       	brne	.-78     	; 0x22ba <CAL_u32SUM+0x86>
	{
		n2 += (dec * num2[counter-1]);
		dec *= 10;
	}
	res = n1 + n2;
    2308:	9c 85       	ldd	r25, Y+12	; 0x0c
    230a:	8b 85       	ldd	r24, Y+11	; 0x0b
    230c:	89 0f       	add	r24, r25
    230e:	8a 87       	std	Y+10, r24	; 0x0a
	if(res > 9)
    2310:	8a 85       	ldd	r24, Y+10	; 0x0a
    2312:	8a 30       	cpi	r24, 0x0A	; 10
    2314:	08 f4       	brcc	.+2      	; 0x2318 <CAL_u32SUM+0xe4>
    2316:	50 c0       	rjmp	.+160    	; 0x23b8 <CAL_u32SUM+0x184>
	{
		for(int i = 0;i < sizeof(Res);i++)
    2318:	1c 82       	std	Y+4, r1	; 0x04
    231a:	1b 82       	std	Y+3, r1	; 0x03
    231c:	1b c0       	rjmp	.+54     	; 0x2354 <CAL_u32SUM+0x120>
		{
			Res[i] = (res%10)+'0';
    231e:	4b 81       	ldd	r20, Y+3	; 0x03
    2320:	5c 81       	ldd	r21, Y+4	; 0x04
    2322:	8a 85       	ldd	r24, Y+10	; 0x0a
    2324:	9a e0       	ldi	r25, 0x0A	; 10
    2326:	69 2f       	mov	r22, r25
    2328:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    232c:	89 2f       	mov	r24, r25
    232e:	28 2f       	mov	r18, r24
    2330:	20 5d       	subi	r18, 0xD0	; 208
    2332:	ce 01       	movw	r24, r28
    2334:	0d 96       	adiw	r24, 0x0d	; 13
    2336:	fc 01       	movw	r30, r24
    2338:	e4 0f       	add	r30, r20
    233a:	f5 1f       	adc	r31, r21
    233c:	20 83       	st	Z, r18
			res /= 10;
    233e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2340:	9a e0       	ldi	r25, 0x0A	; 10
    2342:	69 2f       	mov	r22, r25
    2344:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    2348:	8a 87       	std	Y+10, r24	; 0x0a
		dec *= 10;
	}
	res = n1 + n2;
	if(res > 9)
	{
		for(int i = 0;i < sizeof(Res);i++)
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	01 96       	adiw	r24, 0x01	; 1
    2350:	9c 83       	std	Y+4, r25	; 0x04
    2352:	8b 83       	std	Y+3, r24	; 0x03
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	84 30       	cpi	r24, 0x04	; 4
    235a:	91 05       	cpc	r25, r1
    235c:	00 f3       	brcs	.-64     	; 0x231e <CAL_u32SUM+0xea>
		{
			Res[i] = (res%10)+'0';
			res /= 10;
		}
		int counter = sizeof(Res)-1;
    235e:	83 e0       	ldi	r24, 0x03	; 3
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <CAL_u32SUM+0x13e>
		while(Res[counter] == '0')
		{
			counter --;
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	9e 83       	std	Y+6, r25	; 0x06
    2370:	8d 83       	std	Y+5, r24	; 0x05
		{
			Res[i] = (res%10)+'0';
			res /= 10;
		}
		int counter = sizeof(Res)-1;
		while(Res[counter] == '0')
    2372:	2d 81       	ldd	r18, Y+5	; 0x05
    2374:	3e 81       	ldd	r19, Y+6	; 0x06
    2376:	ce 01       	movw	r24, r28
    2378:	0d 96       	adiw	r24, 0x0d	; 13
    237a:	fc 01       	movw	r30, r24
    237c:	e2 0f       	add	r30, r18
    237e:	f3 1f       	adc	r31, r19
    2380:	80 81       	ld	r24, Z
    2382:	80 33       	cpi	r24, 0x30	; 48
    2384:	89 f3       	breq	.-30     	; 0x2368 <CAL_u32SUM+0x134>
		{
			counter --;
		}
		for(int i = counter; i >= 0; i--)
    2386:	8d 81       	ldd	r24, Y+5	; 0x05
    2388:	9e 81       	ldd	r25, Y+6	; 0x06
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <CAL_u32SUM+0x17a>
			LCD_enuDisplayChar(Res[i]);
    2390:	29 81       	ldd	r18, Y+1	; 0x01
    2392:	3a 81       	ldd	r19, Y+2	; 0x02
    2394:	ce 01       	movw	r24, r28
    2396:	0d 96       	adiw	r24, 0x0d	; 13
    2398:	fc 01       	movw	r30, r24
    239a:	e2 0f       	add	r30, r18
    239c:	f3 1f       	adc	r31, r19
    239e:	80 81       	ld	r24, Z
    23a0:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
		int counter = sizeof(Res)-1;
		while(Res[counter] == '0')
		{
			counter --;
		}
		for(int i = counter; i >= 0; i--)
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	99 23       	and	r25, r25
    23b4:	6c f7       	brge	.-38     	; 0x2390 <CAL_u32SUM+0x15c>
    23b6:	04 c0       	rjmp	.+8      	; 0x23c0 <CAL_u32SUM+0x18c>
			LCD_enuDisplayChar(Res[i]);
	}
	else
		LCD_enuDisplayChar(res+'0');
    23b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ba:	80 5d       	subi	r24, 0xD0	; 208
    23bc:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>

}
    23c0:	66 96       	adiw	r28, 0x16	; 22
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <CAL_u32SUB>:

void CAL_u32SUB(u8 num1[],u8 num2[],u8 n, u8 m)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	6c 97       	sbiw	r28, 0x1c	; 28
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	98 8f       	std	Y+24, r25	; 0x18
    23e8:	8f 8b       	std	Y+23, r24	; 0x17
    23ea:	7a 8f       	std	Y+26, r23	; 0x1a
    23ec:	69 8f       	std	Y+25, r22	; 0x19
    23ee:	4b 8f       	std	Y+27, r20	; 0x1b
    23f0:	2c 8f       	std	Y+28, r18	; 0x1c
	u8 n1 = 0,n2 = 0,res,Res[NUM_SIZE],dec=1;
    23f2:	1a 8a       	std	Y+18, r1	; 0x12
    23f4:	19 8a       	std	Y+17, r1	; 0x11
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	8f 87       	std	Y+15, r24	; 0x0f
	for(u8 counter = n; counter > 0;counter--)
    23fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fc:	8e 87       	std	Y+14, r24	; 0x0e
    23fe:	24 c0       	rjmp	.+72     	; 0x2448 <CAL_u32SUB+0x76>
	{
		n1 += (dec * num1[counter-1]);
    2400:	8e 85       	ldd	r24, Y+14	; 0x0e
    2402:	88 2f       	mov	r24, r24
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9c 01       	movw	r18, r24
    2408:	21 50       	subi	r18, 0x01	; 1
    240a:	30 40       	sbci	r19, 0x00	; 0
    240c:	8f 89       	ldd	r24, Y+23	; 0x17
    240e:	98 8d       	ldd	r25, Y+24	; 0x18
    2410:	fc 01       	movw	r30, r24
    2412:	e2 0f       	add	r30, r18
    2414:	f3 1f       	adc	r31, r19
    2416:	90 81       	ld	r25, Z
    2418:	8f 85       	ldd	r24, Y+15	; 0x0f
    241a:	98 9f       	mul	r25, r24
    241c:	90 2d       	mov	r25, r0
    241e:	11 24       	eor	r1, r1
    2420:	8a 89       	ldd	r24, Y+18	; 0x12
    2422:	89 0f       	add	r24, r25
    2424:	8a 8b       	std	Y+18, r24	; 0x12
		dec *= 10;
    2426:	8f 85       	ldd	r24, Y+15	; 0x0f
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9c 01       	movw	r18, r24
    242e:	22 0f       	add	r18, r18
    2430:	33 1f       	adc	r19, r19
    2432:	c9 01       	movw	r24, r18
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	82 0f       	add	r24, r18
    243e:	93 1f       	adc	r25, r19
    2440:	8f 87       	std	Y+15, r24	; 0x0f
}

void CAL_u32SUB(u8 num1[],u8 num2[],u8 n, u8 m)
{
	u8 n1 = 0,n2 = 0,res,Res[NUM_SIZE],dec=1;
	for(u8 counter = n; counter > 0;counter--)
    2442:	8e 85       	ldd	r24, Y+14	; 0x0e
    2444:	81 50       	subi	r24, 0x01	; 1
    2446:	8e 87       	std	Y+14, r24	; 0x0e
    2448:	8e 85       	ldd	r24, Y+14	; 0x0e
    244a:	88 23       	and	r24, r24
    244c:	c9 f6       	brne	.-78     	; 0x2400 <CAL_u32SUB+0x2e>
	{
		n1 += (dec * num1[counter-1]);
		dec *= 10;
	}
	dec = 1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	8f 87       	std	Y+15, r24	; 0x0f
	for(u8 counter = m; counter > 0;counter--)
    2452:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2454:	8d 87       	std	Y+13, r24	; 0x0d
    2456:	24 c0       	rjmp	.+72     	; 0x24a0 <CAL_u32SUB+0xce>
	{
		n2 += (dec * num2[counter-1]);
    2458:	8d 85       	ldd	r24, Y+13	; 0x0d
    245a:	88 2f       	mov	r24, r24
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9c 01       	movw	r18, r24
    2460:	21 50       	subi	r18, 0x01	; 1
    2462:	30 40       	sbci	r19, 0x00	; 0
    2464:	89 8d       	ldd	r24, Y+25	; 0x19
    2466:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2468:	fc 01       	movw	r30, r24
    246a:	e2 0f       	add	r30, r18
    246c:	f3 1f       	adc	r31, r19
    246e:	90 81       	ld	r25, Z
    2470:	8f 85       	ldd	r24, Y+15	; 0x0f
    2472:	98 9f       	mul	r25, r24
    2474:	90 2d       	mov	r25, r0
    2476:	11 24       	eor	r1, r1
    2478:	89 89       	ldd	r24, Y+17	; 0x11
    247a:	89 0f       	add	r24, r25
    247c:	89 8b       	std	Y+17, r24	; 0x11
		dec *= 10;
    247e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2480:	88 2f       	mov	r24, r24
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9c 01       	movw	r18, r24
    2486:	22 0f       	add	r18, r18
    2488:	33 1f       	adc	r19, r19
    248a:	c9 01       	movw	r24, r18
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	82 0f       	add	r24, r18
    2496:	93 1f       	adc	r25, r19
    2498:	8f 87       	std	Y+15, r24	; 0x0f
	{
		n1 += (dec * num1[counter-1]);
		dec *= 10;
	}
	dec = 1;
	for(u8 counter = m; counter > 0;counter--)
    249a:	8d 85       	ldd	r24, Y+13	; 0x0d
    249c:	81 50       	subi	r24, 0x01	; 1
    249e:	8d 87       	std	Y+13, r24	; 0x0d
    24a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a2:	88 23       	and	r24, r24
    24a4:	c9 f6       	brne	.-78     	; 0x2458 <CAL_u32SUB+0x86>
	{
		n2 += (dec * num2[counter-1]);
		dec *= 10;
	}
	if(n1 > n2)
    24a6:	9a 89       	ldd	r25, Y+18	; 0x12
    24a8:	89 89       	ldd	r24, Y+17	; 0x11
    24aa:	89 17       	cp	r24, r25
    24ac:	08 f0       	brcs	.+2      	; 0x24b0 <CAL_u32SUB+0xde>
    24ae:	5f c0       	rjmp	.+190    	; 0x256e <CAL_u32SUB+0x19c>
	{
		res = n1 - n2;
    24b0:	9a 89       	ldd	r25, Y+18	; 0x12
    24b2:	89 89       	ldd	r24, Y+17	; 0x11
    24b4:	29 2f       	mov	r18, r25
    24b6:	28 1b       	sub	r18, r24
    24b8:	82 2f       	mov	r24, r18
    24ba:	88 8b       	std	Y+16, r24	; 0x10
		if(res > 9)
    24bc:	88 89       	ldd	r24, Y+16	; 0x10
    24be:	8a 30       	cpi	r24, 0x0A	; 10
    24c0:	08 f4       	brcc	.+2      	; 0x24c4 <CAL_u32SUB+0xf2>
    24c2:	50 c0       	rjmp	.+160    	; 0x2564 <CAL_u32SUB+0x192>
		{
			for(int i = 0;i < sizeof(Res);i++)
    24c4:	1a 86       	std	Y+10, r1	; 0x0a
    24c6:	19 86       	std	Y+9, r1	; 0x09
    24c8:	1b c0       	rjmp	.+54     	; 0x2500 <CAL_u32SUB+0x12e>
			{
				Res[i] = (res%10)+'0';
    24ca:	49 85       	ldd	r20, Y+9	; 0x09
    24cc:	5a 85       	ldd	r21, Y+10	; 0x0a
    24ce:	88 89       	ldd	r24, Y+16	; 0x10
    24d0:	9a e0       	ldi	r25, 0x0A	; 10
    24d2:	69 2f       	mov	r22, r25
    24d4:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    24d8:	89 2f       	mov	r24, r25
    24da:	28 2f       	mov	r18, r24
    24dc:	20 5d       	subi	r18, 0xD0	; 208
    24de:	ce 01       	movw	r24, r28
    24e0:	43 96       	adiw	r24, 0x13	; 19
    24e2:	fc 01       	movw	r30, r24
    24e4:	e4 0f       	add	r30, r20
    24e6:	f5 1f       	adc	r31, r21
    24e8:	20 83       	st	Z, r18
				res /= 10;
    24ea:	88 89       	ldd	r24, Y+16	; 0x10
    24ec:	9a e0       	ldi	r25, 0x0A	; 10
    24ee:	69 2f       	mov	r22, r25
    24f0:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    24f4:	88 8b       	std	Y+16, r24	; 0x10
	if(n1 > n2)
	{
		res = n1 - n2;
		if(res > 9)
		{
			for(int i = 0;i < sizeof(Res);i++)
    24f6:	89 85       	ldd	r24, Y+9	; 0x09
    24f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fa:	01 96       	adiw	r24, 0x01	; 1
    24fc:	9a 87       	std	Y+10, r25	; 0x0a
    24fe:	89 87       	std	Y+9, r24	; 0x09
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	84 30       	cpi	r24, 0x04	; 4
    2506:	91 05       	cpc	r25, r1
    2508:	00 f3       	brcs	.-64     	; 0x24ca <CAL_u32SUB+0xf8>
			{
				Res[i] = (res%10)+'0';
				res /= 10;
			}
			int counter = sizeof(Res)-1;
    250a:	83 e0       	ldi	r24, 0x03	; 3
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9c 87       	std	Y+12, r25	; 0x0c
    2510:	8b 87       	std	Y+11, r24	; 0x0b
    2512:	05 c0       	rjmp	.+10     	; 0x251e <CAL_u32SUB+0x14c>
			while(Res[counter] == '0')
			{
				counter --;
    2514:	8b 85       	ldd	r24, Y+11	; 0x0b
    2516:	9c 85       	ldd	r25, Y+12	; 0x0c
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	9c 87       	std	Y+12, r25	; 0x0c
    251c:	8b 87       	std	Y+11, r24	; 0x0b
			{
				Res[i] = (res%10)+'0';
				res /= 10;
			}
			int counter = sizeof(Res)-1;
			while(Res[counter] == '0')
    251e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2520:	3c 85       	ldd	r19, Y+12	; 0x0c
    2522:	ce 01       	movw	r24, r28
    2524:	43 96       	adiw	r24, 0x13	; 19
    2526:	fc 01       	movw	r30, r24
    2528:	e2 0f       	add	r30, r18
    252a:	f3 1f       	adc	r31, r19
    252c:	80 81       	ld	r24, Z
    252e:	80 33       	cpi	r24, 0x30	; 48
    2530:	89 f3       	breq	.-30     	; 0x2514 <CAL_u32SUB+0x142>
			{
				counter --;
			}
			for(int i = counter; i >= 0; i--)
    2532:	8b 85       	ldd	r24, Y+11	; 0x0b
    2534:	9c 85       	ldd	r25, Y+12	; 0x0c
    2536:	98 87       	std	Y+8, r25	; 0x08
    2538:	8f 83       	std	Y+7, r24	; 0x07
    253a:	0f c0       	rjmp	.+30     	; 0x255a <CAL_u32SUB+0x188>
				LCD_enuDisplayChar(Res[i]);
    253c:	2f 81       	ldd	r18, Y+7	; 0x07
    253e:	38 85       	ldd	r19, Y+8	; 0x08
    2540:	ce 01       	movw	r24, r28
    2542:	43 96       	adiw	r24, 0x13	; 19
    2544:	fc 01       	movw	r30, r24
    2546:	e2 0f       	add	r30, r18
    2548:	f3 1f       	adc	r31, r19
    254a:	80 81       	ld	r24, Z
    254c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
			int counter = sizeof(Res)-1;
			while(Res[counter] == '0')
			{
				counter --;
			}
			for(int i = counter; i >= 0; i--)
    2550:	8f 81       	ldd	r24, Y+7	; 0x07
    2552:	98 85       	ldd	r25, Y+8	; 0x08
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	98 87       	std	Y+8, r25	; 0x08
    2558:	8f 83       	std	Y+7, r24	; 0x07
    255a:	8f 81       	ldd	r24, Y+7	; 0x07
    255c:	98 85       	ldd	r25, Y+8	; 0x08
    255e:	99 23       	and	r25, r25
    2560:	6c f7       	brge	.-38     	; 0x253c <CAL_u32SUB+0x16a>
    2562:	6e c0       	rjmp	.+220    	; 0x2640 <CAL_u32SUB+0x26e>
				LCD_enuDisplayChar(Res[i]);
		}
		else
			LCD_enuDisplayChar(res+'0');
    2564:	88 89       	ldd	r24, Y+16	; 0x10
    2566:	80 5d       	subi	r24, 0xD0	; 208
    2568:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
    256c:	69 c0       	rjmp	.+210    	; 0x2640 <CAL_u32SUB+0x26e>
	}
	else if(n1 == n2)
    256e:	9a 89       	ldd	r25, Y+18	; 0x12
    2570:	89 89       	ldd	r24, Y+17	; 0x11
    2572:	98 17       	cp	r25, r24
    2574:	21 f4       	brne	.+8      	; 0x257e <CAL_u32SUB+0x1ac>
		LCD_enuDisplayChar('0');
    2576:	80 e3       	ldi	r24, 0x30	; 48
    2578:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
    257c:	61 c0       	rjmp	.+194    	; 0x2640 <CAL_u32SUB+0x26e>
	else
	{
		res = n2 - n1;
    257e:	99 89       	ldd	r25, Y+17	; 0x11
    2580:	8a 89       	ldd	r24, Y+18	; 0x12
    2582:	29 2f       	mov	r18, r25
    2584:	28 1b       	sub	r18, r24
    2586:	82 2f       	mov	r24, r18
    2588:	88 8b       	std	Y+16, r24	; 0x10
		LCD_enuDisplayChar('-');
    258a:	8d e2       	ldi	r24, 0x2D	; 45
    258c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
		if(res > 9)
    2590:	88 89       	ldd	r24, Y+16	; 0x10
    2592:	8a 30       	cpi	r24, 0x0A	; 10
    2594:	08 f4       	brcc	.+2      	; 0x2598 <CAL_u32SUB+0x1c6>
    2596:	50 c0       	rjmp	.+160    	; 0x2638 <CAL_u32SUB+0x266>
		{
			for(int i = 0;i < sizeof(Res);i++)
    2598:	1c 82       	std	Y+4, r1	; 0x04
    259a:	1b 82       	std	Y+3, r1	; 0x03
    259c:	1b c0       	rjmp	.+54     	; 0x25d4 <CAL_u32SUB+0x202>
			{
				Res[i] = (res%10)+'0';
    259e:	4b 81       	ldd	r20, Y+3	; 0x03
    25a0:	5c 81       	ldd	r21, Y+4	; 0x04
    25a2:	88 89       	ldd	r24, Y+16	; 0x10
    25a4:	9a e0       	ldi	r25, 0x0A	; 10
    25a6:	69 2f       	mov	r22, r25
    25a8:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    25ac:	89 2f       	mov	r24, r25
    25ae:	28 2f       	mov	r18, r24
    25b0:	20 5d       	subi	r18, 0xD0	; 208
    25b2:	ce 01       	movw	r24, r28
    25b4:	43 96       	adiw	r24, 0x13	; 19
    25b6:	fc 01       	movw	r30, r24
    25b8:	e4 0f       	add	r30, r20
    25ba:	f5 1f       	adc	r31, r21
    25bc:	20 83       	st	Z, r18
				res /= 10;
    25be:	88 89       	ldd	r24, Y+16	; 0x10
    25c0:	9a e0       	ldi	r25, 0x0A	; 10
    25c2:	69 2f       	mov	r22, r25
    25c4:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    25c8:	88 8b       	std	Y+16, r24	; 0x10
	{
		res = n2 - n1;
		LCD_enuDisplayChar('-');
		if(res > 9)
		{
			for(int i = 0;i < sizeof(Res);i++)
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	9c 81       	ldd	r25, Y+4	; 0x04
    25ce:	01 96       	adiw	r24, 0x01	; 1
    25d0:	9c 83       	std	Y+4, r25	; 0x04
    25d2:	8b 83       	std	Y+3, r24	; 0x03
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	9c 81       	ldd	r25, Y+4	; 0x04
    25d8:	84 30       	cpi	r24, 0x04	; 4
    25da:	91 05       	cpc	r25, r1
    25dc:	00 f3       	brcs	.-64     	; 0x259e <CAL_u32SUB+0x1cc>
			{
				Res[i] = (res%10)+'0';
				res /= 10;
			}
			int counter = sizeof(Res)-1;
    25de:	83 e0       	ldi	r24, 0x03	; 3
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	9e 83       	std	Y+6, r25	; 0x06
    25e4:	8d 83       	std	Y+5, r24	; 0x05
    25e6:	05 c0       	rjmp	.+10     	; 0x25f2 <CAL_u32SUB+0x220>
			while(Res[counter] == '0')
			{
				counter --;
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	9e 83       	std	Y+6, r25	; 0x06
    25f0:	8d 83       	std	Y+5, r24	; 0x05
			{
				Res[i] = (res%10)+'0';
				res /= 10;
			}
			int counter = sizeof(Res)-1;
			while(Res[counter] == '0')
    25f2:	2d 81       	ldd	r18, Y+5	; 0x05
    25f4:	3e 81       	ldd	r19, Y+6	; 0x06
    25f6:	ce 01       	movw	r24, r28
    25f8:	43 96       	adiw	r24, 0x13	; 19
    25fa:	fc 01       	movw	r30, r24
    25fc:	e2 0f       	add	r30, r18
    25fe:	f3 1f       	adc	r31, r19
    2600:	80 81       	ld	r24, Z
    2602:	80 33       	cpi	r24, 0x30	; 48
    2604:	89 f3       	breq	.-30     	; 0x25e8 <CAL_u32SUB+0x216>
			{
				counter --;
			}
			for(int i = counter; i >= 0; i--)
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	9a 83       	std	Y+2, r25	; 0x02
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	0f c0       	rjmp	.+30     	; 0x262e <CAL_u32SUB+0x25c>
				LCD_enuDisplayChar(Res[i]);
    2610:	29 81       	ldd	r18, Y+1	; 0x01
    2612:	3a 81       	ldd	r19, Y+2	; 0x02
    2614:	ce 01       	movw	r24, r28
    2616:	43 96       	adiw	r24, 0x13	; 19
    2618:	fc 01       	movw	r30, r24
    261a:	e2 0f       	add	r30, r18
    261c:	f3 1f       	adc	r31, r19
    261e:	80 81       	ld	r24, Z
    2620:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
			int counter = sizeof(Res)-1;
			while(Res[counter] == '0')
			{
				counter --;
			}
			for(int i = counter; i >= 0; i--)
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	9a 81       	ldd	r25, Y+2	; 0x02
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	9a 83       	std	Y+2, r25	; 0x02
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	9a 81       	ldd	r25, Y+2	; 0x02
    2632:	99 23       	and	r25, r25
    2634:	6c f7       	brge	.-38     	; 0x2610 <CAL_u32SUB+0x23e>
    2636:	04 c0       	rjmp	.+8      	; 0x2640 <CAL_u32SUB+0x26e>
				LCD_enuDisplayChar(Res[i]);
		}
		else
			LCD_enuDisplayChar(res+'0');
    2638:	88 89       	ldd	r24, Y+16	; 0x10
    263a:	80 5d       	subi	r24, 0xD0	; 208
    263c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
	}
}
    2640:	6c 96       	adiw	r28, 0x1c	; 28
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <CAL_u32MUL>:

void CAL_u32MUL(u8 num1[],u8 num2[],u8 n, u8 m)
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	66 97       	sbiw	r28, 0x16	; 22
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	9a 8b       	std	Y+18, r25	; 0x12
    2668:	89 8b       	std	Y+17, r24	; 0x11
    266a:	7c 8b       	std	Y+20, r23	; 0x14
    266c:	6b 8b       	std	Y+19, r22	; 0x13
    266e:	4d 8b       	std	Y+21, r20	; 0x15
    2670:	2e 8b       	std	Y+22, r18	; 0x16
	u8 n1 = 0,n2 = 0,res,Res[NUM_SIZE],dec=1;
    2672:	1c 86       	std	Y+12, r1	; 0x0c
    2674:	1b 86       	std	Y+11, r1	; 0x0b
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	89 87       	std	Y+9, r24	; 0x09
	for(u8 counter = n; counter > 0;counter--)
    267a:	8d 89       	ldd	r24, Y+21	; 0x15
    267c:	88 87       	std	Y+8, r24	; 0x08
    267e:	24 c0       	rjmp	.+72     	; 0x26c8 <CAL_u32MUL+0x76>
	{
		n1 += (dec * num1[counter-1]);
    2680:	88 85       	ldd	r24, Y+8	; 0x08
    2682:	88 2f       	mov	r24, r24
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9c 01       	movw	r18, r24
    2688:	21 50       	subi	r18, 0x01	; 1
    268a:	30 40       	sbci	r19, 0x00	; 0
    268c:	89 89       	ldd	r24, Y+17	; 0x11
    268e:	9a 89       	ldd	r25, Y+18	; 0x12
    2690:	fc 01       	movw	r30, r24
    2692:	e2 0f       	add	r30, r18
    2694:	f3 1f       	adc	r31, r19
    2696:	90 81       	ld	r25, Z
    2698:	89 85       	ldd	r24, Y+9	; 0x09
    269a:	98 9f       	mul	r25, r24
    269c:	90 2d       	mov	r25, r0
    269e:	11 24       	eor	r1, r1
    26a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    26a2:	89 0f       	add	r24, r25
    26a4:	8c 87       	std	Y+12, r24	; 0x0c
		dec *= 10;
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	88 2f       	mov	r24, r24
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	9c 01       	movw	r18, r24
    26ae:	22 0f       	add	r18, r18
    26b0:	33 1f       	adc	r19, r19
    26b2:	c9 01       	movw	r24, r18
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	82 0f       	add	r24, r18
    26be:	93 1f       	adc	r25, r19
    26c0:	89 87       	std	Y+9, r24	; 0x09
}

void CAL_u32MUL(u8 num1[],u8 num2[],u8 n, u8 m)
{
	u8 n1 = 0,n2 = 0,res,Res[NUM_SIZE],dec=1;
	for(u8 counter = n; counter > 0;counter--)
    26c2:	88 85       	ldd	r24, Y+8	; 0x08
    26c4:	81 50       	subi	r24, 0x01	; 1
    26c6:	88 87       	std	Y+8, r24	; 0x08
    26c8:	88 85       	ldd	r24, Y+8	; 0x08
    26ca:	88 23       	and	r24, r24
    26cc:	c9 f6       	brne	.-78     	; 0x2680 <CAL_u32MUL+0x2e>
	{
		n1 += (dec * num1[counter-1]);
		dec *= 10;
	}
	dec = 1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	89 87       	std	Y+9, r24	; 0x09
	for(u8 counter = m; counter > 0;counter--)
    26d2:	8e 89       	ldd	r24, Y+22	; 0x16
    26d4:	8f 83       	std	Y+7, r24	; 0x07
    26d6:	24 c0       	rjmp	.+72     	; 0x2720 <CAL_u32MUL+0xce>
	{
		n2 += (dec * num2[counter-1]);
    26d8:	8f 81       	ldd	r24, Y+7	; 0x07
    26da:	88 2f       	mov	r24, r24
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9c 01       	movw	r18, r24
    26e0:	21 50       	subi	r18, 0x01	; 1
    26e2:	30 40       	sbci	r19, 0x00	; 0
    26e4:	8b 89       	ldd	r24, Y+19	; 0x13
    26e6:	9c 89       	ldd	r25, Y+20	; 0x14
    26e8:	fc 01       	movw	r30, r24
    26ea:	e2 0f       	add	r30, r18
    26ec:	f3 1f       	adc	r31, r19
    26ee:	90 81       	ld	r25, Z
    26f0:	89 85       	ldd	r24, Y+9	; 0x09
    26f2:	98 9f       	mul	r25, r24
    26f4:	90 2d       	mov	r25, r0
    26f6:	11 24       	eor	r1, r1
    26f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    26fa:	89 0f       	add	r24, r25
    26fc:	8b 87       	std	Y+11, r24	; 0x0b
		dec *= 10;
    26fe:	89 85       	ldd	r24, Y+9	; 0x09
    2700:	88 2f       	mov	r24, r24
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9c 01       	movw	r18, r24
    2706:	22 0f       	add	r18, r18
    2708:	33 1f       	adc	r19, r19
    270a:	c9 01       	movw	r24, r18
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	82 0f       	add	r24, r18
    2716:	93 1f       	adc	r25, r19
    2718:	89 87       	std	Y+9, r24	; 0x09
	{
		n1 += (dec * num1[counter-1]);
		dec *= 10;
	}
	dec = 1;
	for(u8 counter = m; counter > 0;counter--)
    271a:	8f 81       	ldd	r24, Y+7	; 0x07
    271c:	81 50       	subi	r24, 0x01	; 1
    271e:	8f 83       	std	Y+7, r24	; 0x07
    2720:	8f 81       	ldd	r24, Y+7	; 0x07
    2722:	88 23       	and	r24, r24
    2724:	c9 f6       	brne	.-78     	; 0x26d8 <CAL_u32MUL+0x86>
	{
		n2 += (dec * num2[counter-1]);
		dec *= 10;
	}
	res = n1 * n2;
    2726:	9c 85       	ldd	r25, Y+12	; 0x0c
    2728:	8b 85       	ldd	r24, Y+11	; 0x0b
    272a:	98 9f       	mul	r25, r24
    272c:	80 2d       	mov	r24, r0
    272e:	11 24       	eor	r1, r1
    2730:	8a 87       	std	Y+10, r24	; 0x0a
	if(res > 9)
    2732:	8a 85       	ldd	r24, Y+10	; 0x0a
    2734:	8a 30       	cpi	r24, 0x0A	; 10
    2736:	08 f4       	brcc	.+2      	; 0x273a <CAL_u32MUL+0xe8>
    2738:	50 c0       	rjmp	.+160    	; 0x27da <CAL_u32MUL+0x188>
	{
		for(int i = 0;i < sizeof(Res);i++)
    273a:	1c 82       	std	Y+4, r1	; 0x04
    273c:	1b 82       	std	Y+3, r1	; 0x03
    273e:	1b c0       	rjmp	.+54     	; 0x2776 <CAL_u32MUL+0x124>
		{
			Res[i] = (res%10)+'0';
    2740:	4b 81       	ldd	r20, Y+3	; 0x03
    2742:	5c 81       	ldd	r21, Y+4	; 0x04
    2744:	8a 85       	ldd	r24, Y+10	; 0x0a
    2746:	9a e0       	ldi	r25, 0x0A	; 10
    2748:	69 2f       	mov	r22, r25
    274a:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    274e:	89 2f       	mov	r24, r25
    2750:	28 2f       	mov	r18, r24
    2752:	20 5d       	subi	r18, 0xD0	; 208
    2754:	ce 01       	movw	r24, r28
    2756:	0d 96       	adiw	r24, 0x0d	; 13
    2758:	fc 01       	movw	r30, r24
    275a:	e4 0f       	add	r30, r20
    275c:	f5 1f       	adc	r31, r21
    275e:	20 83       	st	Z, r18
			res /= 10;
    2760:	8a 85       	ldd	r24, Y+10	; 0x0a
    2762:	9a e0       	ldi	r25, 0x0A	; 10
    2764:	69 2f       	mov	r22, r25
    2766:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    276a:	8a 87       	std	Y+10, r24	; 0x0a
		dec *= 10;
	}
	res = n1 * n2;
	if(res > 9)
	{
		for(int i = 0;i < sizeof(Res);i++)
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	01 96       	adiw	r24, 0x01	; 1
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8b 83       	std	Y+3, r24	; 0x03
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	84 30       	cpi	r24, 0x04	; 4
    277c:	91 05       	cpc	r25, r1
    277e:	00 f3       	brcs	.-64     	; 0x2740 <CAL_u32MUL+0xee>
		{
			Res[i] = (res%10)+'0';
			res /= 10;
		}
		int counter = sizeof(Res)-1;
    2780:	83 e0       	ldi	r24, 0x03	; 3
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	9e 83       	std	Y+6, r25	; 0x06
    2786:	8d 83       	std	Y+5, r24	; 0x05
    2788:	05 c0       	rjmp	.+10     	; 0x2794 <CAL_u32MUL+0x142>
		while(Res[counter] == '0')
		{
			counter --;
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
		{
			Res[i] = (res%10)+'0';
			res /= 10;
		}
		int counter = sizeof(Res)-1;
		while(Res[counter] == '0')
    2794:	2d 81       	ldd	r18, Y+5	; 0x05
    2796:	3e 81       	ldd	r19, Y+6	; 0x06
    2798:	ce 01       	movw	r24, r28
    279a:	0d 96       	adiw	r24, 0x0d	; 13
    279c:	fc 01       	movw	r30, r24
    279e:	e2 0f       	add	r30, r18
    27a0:	f3 1f       	adc	r31, r19
    27a2:	80 81       	ld	r24, Z
    27a4:	80 33       	cpi	r24, 0x30	; 48
    27a6:	89 f3       	breq	.-30     	; 0x278a <CAL_u32MUL+0x138>
		{
			counter --;
		}
		for(int i = counter; i >= 0; i--)
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	9a 83       	std	Y+2, r25	; 0x02
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	0f c0       	rjmp	.+30     	; 0x27d0 <CAL_u32MUL+0x17e>
			LCD_enuDisplayChar(Res[i]);
    27b2:	29 81       	ldd	r18, Y+1	; 0x01
    27b4:	3a 81       	ldd	r19, Y+2	; 0x02
    27b6:	ce 01       	movw	r24, r28
    27b8:	0d 96       	adiw	r24, 0x0d	; 13
    27ba:	fc 01       	movw	r30, r24
    27bc:	e2 0f       	add	r30, r18
    27be:	f3 1f       	adc	r31, r19
    27c0:	80 81       	ld	r24, Z
    27c2:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
		int counter = sizeof(Res)-1;
		while(Res[counter] == '0')
		{
			counter --;
		}
		for(int i = counter; i >= 0; i--)
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	9a 81       	ldd	r25, Y+2	; 0x02
    27d4:	99 23       	and	r25, r25
    27d6:	6c f7       	brge	.-38     	; 0x27b2 <CAL_u32MUL+0x160>
    27d8:	04 c0       	rjmp	.+8      	; 0x27e2 <CAL_u32MUL+0x190>
			LCD_enuDisplayChar(Res[i]);
	}
	else
		LCD_enuDisplayChar(res+'0');
    27da:	8a 85       	ldd	r24, Y+10	; 0x0a
    27dc:	80 5d       	subi	r24, 0xD0	; 208
    27de:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>

}
    27e2:	66 96       	adiw	r28, 0x16	; 22
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <CAL_u32DIV>:

void CAL_u32DIV(u8 num1[],u8 num2[],u8 n, u8 m)
{
    27f4:	ef 92       	push	r14
    27f6:	ff 92       	push	r15
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	6b 97       	sbiw	r28, 0x1b	; 27
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	9f 8b       	std	Y+23, r25	; 0x17
    2812:	8e 8b       	std	Y+22, r24	; 0x16
    2814:	79 8f       	std	Y+25, r23	; 0x19
    2816:	68 8f       	std	Y+24, r22	; 0x18
    2818:	4a 8f       	std	Y+26, r20	; 0x1a
    281a:	2b 8f       	std	Y+27, r18	; 0x1b
	u8 n1 = 0,n2 = 0,res,Res[NUM_SIZE],dec=1;
    281c:	19 8a       	std	Y+17, r1	; 0x11
    281e:	18 8a       	std	Y+16, r1	; 0x10
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	8e 87       	std	Y+14, r24	; 0x0e
	for(u8 counter = n; counter > 0;counter--)
    2824:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2826:	8d 87       	std	Y+13, r24	; 0x0d
    2828:	24 c0       	rjmp	.+72     	; 0x2872 <CAL_u32DIV+0x7e>
	{
		n1 += (dec * num1[counter-1]);
    282a:	8d 85       	ldd	r24, Y+13	; 0x0d
    282c:	88 2f       	mov	r24, r24
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	9c 01       	movw	r18, r24
    2832:	21 50       	subi	r18, 0x01	; 1
    2834:	30 40       	sbci	r19, 0x00	; 0
    2836:	8e 89       	ldd	r24, Y+22	; 0x16
    2838:	9f 89       	ldd	r25, Y+23	; 0x17
    283a:	fc 01       	movw	r30, r24
    283c:	e2 0f       	add	r30, r18
    283e:	f3 1f       	adc	r31, r19
    2840:	90 81       	ld	r25, Z
    2842:	8e 85       	ldd	r24, Y+14	; 0x0e
    2844:	98 9f       	mul	r25, r24
    2846:	90 2d       	mov	r25, r0
    2848:	11 24       	eor	r1, r1
    284a:	89 89       	ldd	r24, Y+17	; 0x11
    284c:	89 0f       	add	r24, r25
    284e:	89 8b       	std	Y+17, r24	; 0x11
		dec *= 10;
    2850:	8e 85       	ldd	r24, Y+14	; 0x0e
    2852:	88 2f       	mov	r24, r24
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	9c 01       	movw	r18, r24
    2858:	22 0f       	add	r18, r18
    285a:	33 1f       	adc	r19, r19
    285c:	c9 01       	movw	r24, r18
    285e:	88 0f       	add	r24, r24
    2860:	99 1f       	adc	r25, r25
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	82 0f       	add	r24, r18
    2868:	93 1f       	adc	r25, r19
    286a:	8e 87       	std	Y+14, r24	; 0x0e
}

void CAL_u32DIV(u8 num1[],u8 num2[],u8 n, u8 m)
{
	u8 n1 = 0,n2 = 0,res,Res[NUM_SIZE],dec=1;
	for(u8 counter = n; counter > 0;counter--)
    286c:	8d 85       	ldd	r24, Y+13	; 0x0d
    286e:	81 50       	subi	r24, 0x01	; 1
    2870:	8d 87       	std	Y+13, r24	; 0x0d
    2872:	8d 85       	ldd	r24, Y+13	; 0x0d
    2874:	88 23       	and	r24, r24
    2876:	c9 f6       	brne	.-78     	; 0x282a <CAL_u32DIV+0x36>
	{
		n1 += (dec * num1[counter-1]);
		dec *= 10;
	}
	dec = 1;
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	8e 87       	std	Y+14, r24	; 0x0e
	for(u8 counter = m; counter > 0;counter--)
    287c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    287e:	8c 87       	std	Y+12, r24	; 0x0c
    2880:	24 c0       	rjmp	.+72     	; 0x28ca <CAL_u32DIV+0xd6>
	{
		n2 += (dec * num2[counter-1]);
    2882:	8c 85       	ldd	r24, Y+12	; 0x0c
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	9c 01       	movw	r18, r24
    288a:	21 50       	subi	r18, 0x01	; 1
    288c:	30 40       	sbci	r19, 0x00	; 0
    288e:	88 8d       	ldd	r24, Y+24	; 0x18
    2890:	99 8d       	ldd	r25, Y+25	; 0x19
    2892:	fc 01       	movw	r30, r24
    2894:	e2 0f       	add	r30, r18
    2896:	f3 1f       	adc	r31, r19
    2898:	90 81       	ld	r25, Z
    289a:	8e 85       	ldd	r24, Y+14	; 0x0e
    289c:	98 9f       	mul	r25, r24
    289e:	90 2d       	mov	r25, r0
    28a0:	11 24       	eor	r1, r1
    28a2:	88 89       	ldd	r24, Y+16	; 0x10
    28a4:	89 0f       	add	r24, r25
    28a6:	88 8b       	std	Y+16, r24	; 0x10
		dec *= 10;
    28a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	9c 01       	movw	r18, r24
    28b0:	22 0f       	add	r18, r18
    28b2:	33 1f       	adc	r19, r19
    28b4:	c9 01       	movw	r24, r18
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	88 0f       	add	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	82 0f       	add	r24, r18
    28c0:	93 1f       	adc	r25, r19
    28c2:	8e 87       	std	Y+14, r24	; 0x0e
	{
		n1 += (dec * num1[counter-1]);
		dec *= 10;
	}
	dec = 1;
	for(u8 counter = m; counter > 0;counter--)
    28c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    28c6:	81 50       	subi	r24, 0x01	; 1
    28c8:	8c 87       	std	Y+12, r24	; 0x0c
    28ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    28cc:	88 23       	and	r24, r24
    28ce:	c9 f6       	brne	.-78     	; 0x2882 <CAL_u32DIV+0x8e>
	{
		n2 += (dec * num2[counter-1]);
		dec *= 10;
	}
	res = n1 / n2;
    28d0:	89 89       	ldd	r24, Y+17	; 0x11
    28d2:	98 89       	ldd	r25, Y+16	; 0x10
    28d4:	69 2f       	mov	r22, r25
    28d6:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    28da:	8f 87       	std	Y+15, r24	; 0x0f
	if(res > 9)
    28dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28de:	8a 30       	cpi	r24, 0x0A	; 10
    28e0:	08 f4       	brcc	.+2      	; 0x28e4 <CAL_u32DIV+0xf0>
    28e2:	50 c0       	rjmp	.+160    	; 0x2984 <CAL_u32DIV+0x190>
	{
		for(int i = 0;i < sizeof(Res);i++)
    28e4:	19 86       	std	Y+9, r1	; 0x09
    28e6:	18 86       	std	Y+8, r1	; 0x08
    28e8:	1b c0       	rjmp	.+54     	; 0x2920 <CAL_u32DIV+0x12c>
		{
			Res[i] = (res%10)+'0';
    28ea:	48 85       	ldd	r20, Y+8	; 0x08
    28ec:	59 85       	ldd	r21, Y+9	; 0x09
    28ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f0:	9a e0       	ldi	r25, 0x0A	; 10
    28f2:	69 2f       	mov	r22, r25
    28f4:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    28f8:	89 2f       	mov	r24, r25
    28fa:	28 2f       	mov	r18, r24
    28fc:	20 5d       	subi	r18, 0xD0	; 208
    28fe:	ce 01       	movw	r24, r28
    2900:	42 96       	adiw	r24, 0x12	; 18
    2902:	fc 01       	movw	r30, r24
    2904:	e4 0f       	add	r30, r20
    2906:	f5 1f       	adc	r31, r21
    2908:	20 83       	st	Z, r18
			res /= 10;
    290a:	8f 85       	ldd	r24, Y+15	; 0x0f
    290c:	9a e0       	ldi	r25, 0x0A	; 10
    290e:	69 2f       	mov	r22, r25
    2910:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    2914:	8f 87       	std	Y+15, r24	; 0x0f
		dec *= 10;
	}
	res = n1 / n2;
	if(res > 9)
	{
		for(int i = 0;i < sizeof(Res);i++)
    2916:	88 85       	ldd	r24, Y+8	; 0x08
    2918:	99 85       	ldd	r25, Y+9	; 0x09
    291a:	01 96       	adiw	r24, 0x01	; 1
    291c:	99 87       	std	Y+9, r25	; 0x09
    291e:	88 87       	std	Y+8, r24	; 0x08
    2920:	88 85       	ldd	r24, Y+8	; 0x08
    2922:	99 85       	ldd	r25, Y+9	; 0x09
    2924:	84 30       	cpi	r24, 0x04	; 4
    2926:	91 05       	cpc	r25, r1
    2928:	00 f3       	brcs	.-64     	; 0x28ea <CAL_u32DIV+0xf6>
		{
			Res[i] = (res%10)+'0';
			res /= 10;
		}
		int counter = sizeof(Res)-1;
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9b 87       	std	Y+11, r25	; 0x0b
    2930:	8a 87       	std	Y+10, r24	; 0x0a
    2932:	05 c0       	rjmp	.+10     	; 0x293e <CAL_u32DIV+0x14a>
		while(Res[counter] == '0')
		{
			counter --;
    2934:	8a 85       	ldd	r24, Y+10	; 0x0a
    2936:	9b 85       	ldd	r25, Y+11	; 0x0b
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	9b 87       	std	Y+11, r25	; 0x0b
    293c:	8a 87       	std	Y+10, r24	; 0x0a
		{
			Res[i] = (res%10)+'0';
			res /= 10;
		}
		int counter = sizeof(Res)-1;
		while(Res[counter] == '0')
    293e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2940:	3b 85       	ldd	r19, Y+11	; 0x0b
    2942:	ce 01       	movw	r24, r28
    2944:	42 96       	adiw	r24, 0x12	; 18
    2946:	fc 01       	movw	r30, r24
    2948:	e2 0f       	add	r30, r18
    294a:	f3 1f       	adc	r31, r19
    294c:	80 81       	ld	r24, Z
    294e:	80 33       	cpi	r24, 0x30	; 48
    2950:	89 f3       	breq	.-30     	; 0x2934 <CAL_u32DIV+0x140>
		{
			counter --;
		}
		for(int i = counter; i >= 0; i--)
    2952:	8a 85       	ldd	r24, Y+10	; 0x0a
    2954:	9b 85       	ldd	r25, Y+11	; 0x0b
    2956:	9f 83       	std	Y+7, r25	; 0x07
    2958:	8e 83       	std	Y+6, r24	; 0x06
    295a:	0f c0       	rjmp	.+30     	; 0x297a <CAL_u32DIV+0x186>
			LCD_enuDisplayChar(Res[i]);
    295c:	2e 81       	ldd	r18, Y+6	; 0x06
    295e:	3f 81       	ldd	r19, Y+7	; 0x07
    2960:	ce 01       	movw	r24, r28
    2962:	42 96       	adiw	r24, 0x12	; 18
    2964:	fc 01       	movw	r30, r24
    2966:	e2 0f       	add	r30, r18
    2968:	f3 1f       	adc	r31, r19
    296a:	80 81       	ld	r24, Z
    296c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
		int counter = sizeof(Res)-1;
		while(Res[counter] == '0')
		{
			counter --;
		}
		for(int i = counter; i >= 0; i--)
    2970:	8e 81       	ldd	r24, Y+6	; 0x06
    2972:	9f 81       	ldd	r25, Y+7	; 0x07
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	9f 83       	std	Y+7, r25	; 0x07
    2978:	8e 83       	std	Y+6, r24	; 0x06
    297a:	8e 81       	ldd	r24, Y+6	; 0x06
    297c:	9f 81       	ldd	r25, Y+7	; 0x07
    297e:	99 23       	and	r25, r25
    2980:	6c f7       	brge	.-38     	; 0x295c <CAL_u32DIV+0x168>
    2982:	04 c0       	rjmp	.+8      	; 0x298c <CAL_u32DIV+0x198>
			LCD_enuDisplayChar(Res[i]);
	}
	else
		LCD_enuDisplayChar(res+'0');
    2984:	8f 85       	ldd	r24, Y+15	; 0x0f
    2986:	80 5d       	subi	r24, 0xD0	; 208
    2988:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
	if(n1%n2 != 0)
    298c:	89 89       	ldd	r24, Y+17	; 0x11
    298e:	98 89       	ldd	r25, Y+16	; 0x10
    2990:	69 2f       	mov	r22, r25
    2992:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    2996:	89 2f       	mov	r24, r25
    2998:	88 23       	and	r24, r24
    299a:	09 f4       	brne	.+2      	; 0x299e <CAL_u32DIV+0x1aa>
    299c:	47 c0       	rjmp	.+142    	; 0x2a2c <CAL_u32DIV+0x238>
	{
		LCD_enuDisplayChar('.');
    299e:	8e e2       	ldi	r24, 0x2E	; 46
    29a0:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
		f32 result = (f32)n1/n2;
    29a4:	89 89       	ldd	r24, Y+17	; 0x11
    29a6:	88 2f       	mov	r24, r24
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	a0 e0       	ldi	r26, 0x00	; 0
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	bc 01       	movw	r22, r24
    29b0:	cd 01       	movw	r24, r26
    29b2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    29b6:	7b 01       	movw	r14, r22
    29b8:	8c 01       	movw	r16, r24
    29ba:	88 89       	ldd	r24, Y+16	; 0x10
    29bc:	88 2f       	mov	r24, r24
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	aa 27       	eor	r26, r26
    29c2:	97 fd       	sbrc	r25, 7
    29c4:	a0 95       	com	r26
    29c6:	ba 2f       	mov	r27, r26
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    29d0:	9b 01       	movw	r18, r22
    29d2:	ac 01       	movw	r20, r24
    29d4:	c8 01       	movw	r24, r16
    29d6:	b7 01       	movw	r22, r14
    29d8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	8a 83       	std	Y+2, r24	; 0x02
    29e2:	9b 83       	std	Y+3, r25	; 0x03
    29e4:	ac 83       	std	Y+4, r26	; 0x04
    29e6:	bd 83       	std	Y+5, r27	; 0x05
		result *= 10;
    29e8:	6a 81       	ldd	r22, Y+2	; 0x02
    29ea:	7b 81       	ldd	r23, Y+3	; 0x03
    29ec:	8c 81       	ldd	r24, Y+4	; 0x04
    29ee:	9d 81       	ldd	r25, Y+5	; 0x05
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e2       	ldi	r20, 0x20	; 32
    29f6:	51 e4       	ldi	r21, 0x41	; 65
    29f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	8a 83       	std	Y+2, r24	; 0x02
    2a02:	9b 83       	std	Y+3, r25	; 0x03
    2a04:	ac 83       	std	Y+4, r26	; 0x04
    2a06:	bd 83       	std	Y+5, r27	; 0x05
		u8 ress = result;
    2a08:	6a 81       	ldd	r22, Y+2	; 0x02
    2a0a:	7b 81       	ldd	r23, Y+3	; 0x03
    2a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuDisplayChar((ress%10)+'0');
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	9a e0       	ldi	r25, 0x0A	; 10
    2a1e:	69 2f       	mov	r22, r25
    2a20:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__udivmodqi4>
    2a24:	89 2f       	mov	r24, r25
    2a26:	80 5d       	subi	r24, 0xD0	; 208
    2a28:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
	}

}
    2a2c:	6b 96       	adiw	r28, 0x1b	; 27
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	1f 91       	pop	r17
    2a3e:	0f 91       	pop	r16
    2a40:	ff 90       	pop	r15
    2a42:	ef 90       	pop	r14
    2a44:	08 95       	ret

00002a46 <main>:
#include "KPD_int.h"

#include "cal.h"

int main(void)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	2f 97       	sbiw	r28, 0x0f	; 15
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	u8 Local_u8OP1[NUM_SIZE];
	u8 Local_u8OP2[NUM_SIZE];
	u8 Local_u8OP;
	u8 counter1 = 0;
    2a5a:	1b 82       	std	Y+3, r1	; 0x03
	u8 counter2 = 0;
    2a5c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Flag = 0;
    2a5e:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuInit();
    2a60:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_enuInit>
	LCD_enuInit();
    2a64:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_enuInit>

	while(1)
	{
		Local_u8Key = KPD_enuGetPresedKey();
    2a68:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <KPD_enuGetPresedKey>
    2a6c:	8d 83       	std	Y+5, r24	; 0x05
		if(Local_u8Key == 20)
    2a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a70:	84 31       	cpi	r24, 0x14	; 20
    2a72:	d1 f3       	breq	.-12     	; 0x2a68 <main+0x22>
			continue;
		else
		{
			do
			{
			}while(Local_u8Key == 0xff);
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	8f 3f       	cpi	r24, 0xFF	; 255
    2a78:	e9 f3       	breq	.-6      	; 0x2a74 <main+0x2e>
			LCD_enuDisplayChar(Local_u8Key);
    2a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_enuDisplayChar>
			if(Local_u8Key == ' ')
    2a80:	8d 81       	ldd	r24, Y+5	; 0x05
    2a82:	80 32       	cpi	r24, 0x20	; 32
    2a84:	31 f4       	brne	.+12     	; 0x2a92 <main+0x4c>
			{
				counter1 = 0;
    2a86:	1b 82       	std	Y+3, r1	; 0x03
				counter2 = 0;
    2a88:	1a 82       	std	Y+2, r1	; 0x02
				Local_u8Flag = 0;
    2a8a:	19 82       	std	Y+1, r1	; 0x01
				LCD_enuInit();
    2a8c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_enuInit>
    2a90:	eb cf       	rjmp	.-42     	; 0x2a68 <main+0x22>
				continue;
			}
			if(Local_u8Flag == 0)
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	88 23       	and	r24, r24
    2a96:	09 f5       	brne	.+66     	; 0x2ada <main+0x94>
			{
			if(Local_u8Key == '+' || Local_u8Key == '-' || Local_u8Key == '/' || Local_u8Key == '*')
    2a98:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9a:	8b 32       	cpi	r24, 0x2B	; 43
    2a9c:	49 f0       	breq	.+18     	; 0x2ab0 <main+0x6a>
    2a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa0:	8d 32       	cpi	r24, 0x2D	; 45
    2aa2:	31 f0       	breq	.+12     	; 0x2ab0 <main+0x6a>
    2aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa6:	8f 32       	cpi	r24, 0x2F	; 47
    2aa8:	19 f0       	breq	.+6      	; 0x2ab0 <main+0x6a>
    2aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2aac:	8a 32       	cpi	r24, 0x2A	; 42
    2aae:	29 f4       	brne	.+10     	; 0x2aba <main+0x74>
			{
				Local_u8OP = Local_u8Key;
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	8c 83       	std	Y+4, r24	; 0x04
				Local_u8Flag = 1;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	28 c0       	rjmp	.+80     	; 0x2b0a <main+0xc4>
			}
			else
			{
				Local_u8OP1[counter1] = Local_u8Key-'0';
    2aba:	8b 81       	ldd	r24, Y+3	; 0x03
    2abc:	28 2f       	mov	r18, r24
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac2:	48 2f       	mov	r20, r24
    2ac4:	40 53       	subi	r20, 0x30	; 48
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	06 96       	adiw	r24, 0x06	; 6
    2aca:	fc 01       	movw	r30, r24
    2acc:	e2 0f       	add	r30, r18
    2ace:	f3 1f       	adc	r31, r19
    2ad0:	40 83       	st	Z, r20
				counter1++;
    2ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad4:	8f 5f       	subi	r24, 0xFF	; 255
    2ad6:	8b 83       	std	Y+3, r24	; 0x03
    2ad8:	18 c0       	rjmp	.+48     	; 0x2b0a <main+0xc4>
			}
			}else if(Local_u8Flag == 1)
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	81 30       	cpi	r24, 0x01	; 1
    2ade:	a9 f4       	brne	.+42     	; 0x2b0a <main+0xc4>
			{
				if(Local_u8Key == '=')
    2ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae2:	8d 33       	cpi	r24, 0x3D	; 61
    2ae4:	19 f4       	brne	.+6      	; 0x2aec <main+0xa6>
				{
					Local_u8Flag = 2;
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	89 83       	std	Y+1, r24	; 0x01
    2aea:	0f c0       	rjmp	.+30     	; 0x2b0a <main+0xc4>
				}
				else
				{
					Local_u8OP2[counter2] = Local_u8Key-'0';
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	8d 81       	ldd	r24, Y+5	; 0x05
    2af4:	48 2f       	mov	r20, r24
    2af6:	40 53       	subi	r20, 0x30	; 48
    2af8:	ce 01       	movw	r24, r28
    2afa:	0a 96       	adiw	r24, 0x0a	; 10
    2afc:	fc 01       	movw	r30, r24
    2afe:	e2 0f       	add	r30, r18
    2b00:	f3 1f       	adc	r31, r19
    2b02:	40 83       	st	Z, r20
					counter2++;
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	8f 5f       	subi	r24, 0xFF	; 255
    2b08:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
			if(Local_u8Flag ==2)
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	82 30       	cpi	r24, 0x02	; 2
    2b0e:	09 f0       	breq	.+2      	; 0x2b12 <main+0xcc>
    2b10:	ab cf       	rjmp	.-170    	; 0x2a68 <main+0x22>
			{
					switch(Local_u8OP)
    2b12:	8c 81       	ldd	r24, Y+4	; 0x04
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	3f 87       	std	Y+15, r19	; 0x0f
    2b1a:	2e 87       	std	Y+14, r18	; 0x0e
    2b1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b20:	8b 32       	cpi	r24, 0x2B	; 43
    2b22:	91 05       	cpc	r25, r1
    2b24:	b1 f0       	breq	.+44     	; 0x2b52 <main+0x10c>
    2b26:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b28:	3f 85       	ldd	r19, Y+15	; 0x0f
    2b2a:	2c 32       	cpi	r18, 0x2C	; 44
    2b2c:	31 05       	cpc	r19, r1
    2b2e:	34 f4       	brge	.+12     	; 0x2b3c <main+0xf6>
    2b30:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b32:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b34:	8a 32       	cpi	r24, 0x2A	; 42
    2b36:	91 05       	cpc	r25, r1
    2b38:	11 f1       	breq	.+68     	; 0x2b7e <main+0x138>
    2b3a:	96 cf       	rjmp	.-212    	; 0x2a68 <main+0x22>
    2b3c:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b3e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2b40:	2d 32       	cpi	r18, 0x2D	; 45
    2b42:	31 05       	cpc	r19, r1
    2b44:	89 f0       	breq	.+34     	; 0x2b68 <main+0x122>
    2b46:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b48:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b4a:	8f 32       	cpi	r24, 0x2F	; 47
    2b4c:	91 05       	cpc	r25, r1
    2b4e:	11 f1       	breq	.+68     	; 0x2b94 <main+0x14e>
    2b50:	8b cf       	rjmp	.-234    	; 0x2a68 <main+0x22>
					{
						case '+':
							CAL_u32SUM(Local_u8OP1,Local_u8OP2,counter1,counter2);
    2b52:	ce 01       	movw	r24, r28
    2b54:	06 96       	adiw	r24, 0x06	; 6
    2b56:	9e 01       	movw	r18, r28
    2b58:	26 5f       	subi	r18, 0xF6	; 246
    2b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5c:	b9 01       	movw	r22, r18
    2b5e:	4b 81       	ldd	r20, Y+3	; 0x03
    2b60:	2a 81       	ldd	r18, Y+2	; 0x02
    2b62:	0e 94 1a 11 	call	0x2234	; 0x2234 <CAL_u32SUM>
    2b66:	80 cf       	rjmp	.-256    	; 0x2a68 <main+0x22>
							break;
						case '-':
							CAL_u32SUB(Local_u8OP1,Local_u8OP2,counter1,counter2);
    2b68:	ce 01       	movw	r24, r28
    2b6a:	06 96       	adiw	r24, 0x06	; 6
    2b6c:	9e 01       	movw	r18, r28
    2b6e:	26 5f       	subi	r18, 0xF6	; 246
    2b70:	3f 4f       	sbci	r19, 0xFF	; 255
    2b72:	b9 01       	movw	r22, r18
    2b74:	4b 81       	ldd	r20, Y+3	; 0x03
    2b76:	2a 81       	ldd	r18, Y+2	; 0x02
    2b78:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <CAL_u32SUB>
    2b7c:	75 cf       	rjmp	.-278    	; 0x2a68 <main+0x22>
							break;
						case '*':
							CAL_u32MUL(Local_u8OP1,Local_u8OP2,counter1,counter2);
    2b7e:	ce 01       	movw	r24, r28
    2b80:	06 96       	adiw	r24, 0x06	; 6
    2b82:	9e 01       	movw	r18, r28
    2b84:	26 5f       	subi	r18, 0xF6	; 246
    2b86:	3f 4f       	sbci	r19, 0xFF	; 255
    2b88:	b9 01       	movw	r22, r18
    2b8a:	4b 81       	ldd	r20, Y+3	; 0x03
    2b8c:	2a 81       	ldd	r18, Y+2	; 0x02
    2b8e:	0e 94 29 13 	call	0x2652	; 0x2652 <CAL_u32MUL>
    2b92:	6a cf       	rjmp	.-300    	; 0x2a68 <main+0x22>
							break;
						case '/':
							CAL_u32DIV(Local_u8OP1,Local_u8OP2,counter1,counter2);
    2b94:	ce 01       	movw	r24, r28
    2b96:	06 96       	adiw	r24, 0x06	; 6
    2b98:	9e 01       	movw	r18, r28
    2b9a:	26 5f       	subi	r18, 0xF6	; 246
    2b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9e:	b9 01       	movw	r22, r18
    2ba0:	4b 81       	ldd	r20, Y+3	; 0x03
    2ba2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ba4:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <CAL_u32DIV>
    2ba8:	5f cf       	rjmp	.-322    	; 0x2a68 <main+0x22>

00002baa <__udivmodqi4>:
    2baa:	99 1b       	sub	r25, r25
    2bac:	79 e0       	ldi	r23, 0x09	; 9
    2bae:	04 c0       	rjmp	.+8      	; 0x2bb8 <__udivmodqi4_ep>

00002bb0 <__udivmodqi4_loop>:
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	96 17       	cp	r25, r22
    2bb4:	08 f0       	brcs	.+2      	; 0x2bb8 <__udivmodqi4_ep>
    2bb6:	96 1b       	sub	r25, r22

00002bb8 <__udivmodqi4_ep>:
    2bb8:	88 1f       	adc	r24, r24
    2bba:	7a 95       	dec	r23
    2bbc:	c9 f7       	brne	.-14     	; 0x2bb0 <__udivmodqi4_loop>
    2bbe:	80 95       	com	r24
    2bc0:	08 95       	ret

00002bc2 <__prologue_saves__>:
    2bc2:	2f 92       	push	r2
    2bc4:	3f 92       	push	r3
    2bc6:	4f 92       	push	r4
    2bc8:	5f 92       	push	r5
    2bca:	6f 92       	push	r6
    2bcc:	7f 92       	push	r7
    2bce:	8f 92       	push	r8
    2bd0:	9f 92       	push	r9
    2bd2:	af 92       	push	r10
    2bd4:	bf 92       	push	r11
    2bd6:	cf 92       	push	r12
    2bd8:	df 92       	push	r13
    2bda:	ef 92       	push	r14
    2bdc:	ff 92       	push	r15
    2bde:	0f 93       	push	r16
    2be0:	1f 93       	push	r17
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	ca 1b       	sub	r28, r26
    2bec:	db 0b       	sbc	r29, r27
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	cd bf       	out	0x3d, r28	; 61
    2bf8:	09 94       	ijmp

00002bfa <__epilogue_restores__>:
    2bfa:	2a 88       	ldd	r2, Y+18	; 0x12
    2bfc:	39 88       	ldd	r3, Y+17	; 0x11
    2bfe:	48 88       	ldd	r4, Y+16	; 0x10
    2c00:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c02:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c04:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c06:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c08:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c0c:	b9 84       	ldd	r11, Y+9	; 0x09
    2c0e:	c8 84       	ldd	r12, Y+8	; 0x08
    2c10:	df 80       	ldd	r13, Y+7	; 0x07
    2c12:	ee 80       	ldd	r14, Y+6	; 0x06
    2c14:	fd 80       	ldd	r15, Y+5	; 0x05
    2c16:	0c 81       	ldd	r16, Y+4	; 0x04
    2c18:	1b 81       	ldd	r17, Y+3	; 0x03
    2c1a:	aa 81       	ldd	r26, Y+2	; 0x02
    2c1c:	b9 81       	ldd	r27, Y+1	; 0x01
    2c1e:	ce 0f       	add	r28, r30
    2c20:	d1 1d       	adc	r29, r1
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	ed 01       	movw	r28, r26
    2c2e:	08 95       	ret

00002c30 <_exit>:
    2c30:	f8 94       	cli

00002c32 <__stop_program>:
    2c32:	ff cf       	rjmp	.-2      	; 0x2c32 <__stop_program>
